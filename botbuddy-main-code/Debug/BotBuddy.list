
BotBuddy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003108  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080031c8  080031c8  000131c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003298  08003298  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003298  08003298  00013298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032a0  080032a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032a0  080032a0  000132a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032a4  080032a4  000132a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  080032b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  080032b4  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000afa7  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018af  00000000  00000000  0002b01e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  0002c8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000081c  00000000  00000000  0002d338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001615  00000000  00000000  0002db54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c308  00000000  00000000  0002f169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00069ef5  00000000  00000000  0003b471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000256c  00000000  00000000  000a5368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000a78d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080031b0 	.word	0x080031b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080031b0 	.word	0x080031b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fbee 	bl	8000c8c <HAL_Init>

  /* USER CODE BEGIN Init */

  /* Initialize our bot buddy */
   BT_BUDDY_Init();
 80004b0:	f000 fa9c 	bl	80009ec <BT_BUDDY_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b4:	f000 f80c 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b8:	f000 f90e 	bl	80006d8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004bc:	f000 f8a2 	bl	8000604 <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 80004c0:	f000 f872 	bl	80005a8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RUN_MOTOR();
 80004c4:	f000 faa8 	bl	8000a18 <RUN_MOTOR>
  event_loop();
 80004c8:	f000 f95c 	bl	8000784 <event_loop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <main+0x24>
	...

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b099      	sub	sp, #100	; 0x64
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	242c      	movs	r4, #44	; 0x2c
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	0018      	movs	r0, r3
 80004dc:	2334      	movs	r3, #52	; 0x34
 80004de:	001a      	movs	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	f002 fe39 	bl	8003158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e6:	2318      	movs	r3, #24
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	0018      	movs	r0, r3
 80004ec:	2314      	movs	r3, #20
 80004ee:	001a      	movs	r2, r3
 80004f0:	2100      	movs	r1, #0
 80004f2:	f002 fe31 	bl	8003158 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f6:	003b      	movs	r3, r7
 80004f8:	0018      	movs	r0, r3
 80004fa:	2318      	movs	r3, #24
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f002 fe2a 	bl	8003158 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000504:	4b26      	ldr	r3, [pc, #152]	; (80005a0 <SystemClock_Config+0xd0>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a26      	ldr	r2, [pc, #152]	; (80005a4 <SystemClock_Config+0xd4>)
 800050a:	401a      	ands	r2, r3
 800050c:	4b24      	ldr	r3, [pc, #144]	; (80005a0 <SystemClock_Config+0xd0>)
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	0109      	lsls	r1, r1, #4
 8000512:	430a      	orrs	r2, r1
 8000514:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000516:	0021      	movs	r1, r4
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2210      	movs	r2, #16
 800051c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2201      	movs	r2, #1
 8000522:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2200      	movs	r2, #0
 8000528:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	22a0      	movs	r2, #160	; 0xa0
 800052e:	0212      	lsls	r2, r2, #8
 8000530:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2200      	movs	r2, #0
 8000536:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000538:	187b      	adds	r3, r7, r1
 800053a:	0018      	movs	r0, r3
 800053c:	f000 fe72 	bl	8001224 <HAL_RCC_OscConfig>
 8000540:	1e03      	subs	r3, r0, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000544:	f000 fa88 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000548:	2118      	movs	r1, #24
 800054a:	187b      	adds	r3, r7, r1
 800054c:	220f      	movs	r2, #15
 800054e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2100      	movs	r1, #0
 800056c:	0018      	movs	r0, r3
 800056e:	f001 f9d5 	bl	800191c <HAL_RCC_ClockConfig>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000576:	f000 fa6f 	bl	8000a58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800057a:	003b      	movs	r3, r7
 800057c:	2204      	movs	r2, #4
 800057e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000580:	003b      	movs	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000586:	003b      	movs	r3, r7
 8000588:	0018      	movs	r0, r3
 800058a:	f001 fbeb 	bl	8001d64 <HAL_RCCEx_PeriphCLKConfig>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000592:	f000 fa61 	bl	8000a58 <Error_Handler>
  }
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b019      	add	sp, #100	; 0x64
 800059c:	bd90      	pop	{r4, r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	40007000 	.word	0x40007000
 80005a4:	ffffe7ff 	.word	0xffffe7ff

080005a8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005ac:	4b13      	ldr	r3, [pc, #76]	; (80005fc <MX_LPUART1_UART_Init+0x54>)
 80005ae:	4a14      	ldr	r2, [pc, #80]	; (8000600 <MX_LPUART1_UART_Init+0x58>)
 80005b0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 19200;
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <MX_LPUART1_UART_Init+0x54>)
 80005b4:	2296      	movs	r2, #150	; 0x96
 80005b6:	01d2      	lsls	r2, r2, #7
 80005b8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <MX_LPUART1_UART_Init+0x54>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <MX_LPUART1_UART_Init+0x54>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <MX_LPUART1_UART_Init+0x54>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <MX_LPUART1_UART_Init+0x54>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <MX_LPUART1_UART_Init+0x54>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <MX_LPUART1_UART_Init+0x54>)
 80005da:	2200      	movs	r2, #0
 80005dc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005de:	4b07      	ldr	r3, [pc, #28]	; (80005fc <MX_LPUART1_UART_Init+0x54>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <MX_LPUART1_UART_Init+0x54>)
 80005e6:	0018      	movs	r0, r3
 80005e8:	f002 f84e 	bl	8002688 <HAL_UART_Init>
 80005ec:	1e03      	subs	r3, r0, #0
 80005ee:	d001      	beq.n	80005f4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80005f0:	f000 fa32 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	20000028 	.word	0x20000028
 8000600:	40004800 	.word	0x40004800

08000604 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800060a:	2310      	movs	r3, #16
 800060c:	18fb      	adds	r3, r7, r3
 800060e:	0018      	movs	r0, r3
 8000610:	2308      	movs	r3, #8
 8000612:	001a      	movs	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	f002 fd9f 	bl	8003158 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800061a:	003b      	movs	r3, r7
 800061c:	0018      	movs	r0, r3
 800061e:	2310      	movs	r3, #16
 8000620:	001a      	movs	r2, r3
 8000622:	2100      	movs	r1, #0
 8000624:	f002 fd98 	bl	8003158 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000628:	4b29      	ldr	r3, [pc, #164]	; (80006d0 <MX_TIM2_Init+0xcc>)
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	05d2      	lsls	r2, r2, #23
 800062e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000630:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <MX_TIM2_Init+0xcc>)
 8000632:	2200      	movs	r2, #0
 8000634:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000636:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <MX_TIM2_Init+0xcc>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 839;
 800063c:	4b24      	ldr	r3, [pc, #144]	; (80006d0 <MX_TIM2_Init+0xcc>)
 800063e:	4a25      	ldr	r2, [pc, #148]	; (80006d4 <MX_TIM2_Init+0xd0>)
 8000640:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000642:	4b23      	ldr	r3, [pc, #140]	; (80006d0 <MX_TIM2_Init+0xcc>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000648:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <MX_TIM2_Init+0xcc>)
 800064a:	2200      	movs	r2, #0
 800064c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800064e:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <MX_TIM2_Init+0xcc>)
 8000650:	0018      	movs	r0, r3
 8000652:	f001 fcb3 	bl	8001fbc <HAL_TIM_PWM_Init>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800065a:	f000 f9fd 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800065e:	2110      	movs	r1, #16
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2200      	movs	r2, #0
 800066a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800066c:	187a      	adds	r2, r7, r1
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <MX_TIM2_Init+0xcc>)
 8000670:	0011      	movs	r1, r2
 8000672:	0018      	movs	r0, r3
 8000674:	f001 ffb0 	bl	80025d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800067c:	f000 f9ec 	bl	8000a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000680:	003b      	movs	r3, r7
 8000682:	2260      	movs	r2, #96	; 0x60
 8000684:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000686:	003b      	movs	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800068c:	003b      	movs	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000692:	003b      	movs	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000698:	0039      	movs	r1, r7
 800069a:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <MX_TIM2_Init+0xcc>)
 800069c:	2200      	movs	r2, #0
 800069e:	0018      	movs	r0, r3
 80006a0:	f001 fd58 	bl	8002154 <HAL_TIM_PWM_ConfigChannel>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80006a8:	f000 f9d6 	bl	8000a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006ac:	0039      	movs	r1, r7
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_TIM2_Init+0xcc>)
 80006b0:	2204      	movs	r2, #4
 80006b2:	0018      	movs	r0, r3
 80006b4:	f001 fd4e 	bl	8002154 <HAL_TIM_PWM_ConfigChannel>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80006bc:	f000 f9cc 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <MX_TIM2_Init+0xcc>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 fa3c 	bl	8000b40 <HAL_TIM_MspPostInit>

}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	b006      	add	sp, #24
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200000b0 	.word	0x200000b0
 80006d4:	00000347 	.word	0x00000347

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b089      	sub	sp, #36	; 0x24
 80006dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	240c      	movs	r4, #12
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	0018      	movs	r0, r3
 80006e4:	2314      	movs	r3, #20
 80006e6:	001a      	movs	r2, r3
 80006e8:	2100      	movs	r1, #0
 80006ea:	f002 fd35 	bl	8003158 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b23      	ldr	r3, [pc, #140]	; (800077c <MX_GPIO_Init+0xa4>)
 80006f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f2:	4b22      	ldr	r3, [pc, #136]	; (800077c <MX_GPIO_Init+0xa4>)
 80006f4:	2101      	movs	r1, #1
 80006f6:	430a      	orrs	r2, r1
 80006f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <MX_GPIO_Init+0xa4>)
 80006fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fe:	2201      	movs	r2, #1
 8000700:	4013      	ands	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_GPIO_Init+0xa4>)
 8000708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_GPIO_Init+0xa4>)
 800070c:	2102      	movs	r1, #2
 800070e:	430a      	orrs	r2, r1
 8000710:	62da      	str	r2, [r3, #44]	; 0x2c
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_GPIO_Init+0xa4>)
 8000714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000716:	2202      	movs	r2, #2
 8000718:	4013      	ands	r3, r2
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800071e:	23de      	movs	r3, #222	; 0xde
 8000720:	00d9      	lsls	r1, r3, #3
 8000722:	23a0      	movs	r3, #160	; 0xa0
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	2200      	movs	r2, #0
 8000728:	0018      	movs	r0, r3
 800072a:	f000 fd5e 	bl	80011ea <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800072e:	193b      	adds	r3, r7, r4
 8000730:	22de      	movs	r2, #222	; 0xde
 8000732:	00d2      	lsls	r2, r2, #3
 8000734:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	193b      	adds	r3, r7, r4
 8000738:	2201      	movs	r2, #1
 800073a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	193b      	adds	r3, r7, r4
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	193a      	adds	r2, r7, r4
 800074a:	23a0      	movs	r3, #160	; 0xa0
 800074c:	05db      	lsls	r3, r3, #23
 800074e:	0011      	movs	r1, r2
 8000750:	0018      	movs	r0, r3
 8000752:	f000 fbbf 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	22f0      	movs	r2, #240	; 0xf0
 800075a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075c:	193b      	adds	r3, r7, r4
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	193b      	adds	r3, r7, r4
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000768:	193b      	adds	r3, r7, r4
 800076a:	4a05      	ldr	r2, [pc, #20]	; (8000780 <MX_GPIO_Init+0xa8>)
 800076c:	0019      	movs	r1, r3
 800076e:	0010      	movs	r0, r2
 8000770:	f000 fbb0 	bl	8000ed4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b009      	add	sp, #36	; 0x24
 800077a:	bd90      	pop	{r4, r7, pc}
 800077c:	40021000 	.word	0x40021000
 8000780:	50000400 	.word	0x50000400

08000784 <event_loop>:

/* USER CODE BEGIN 4 */


/* Event loop that handles our botbuddy when it is running */
void event_loop(void) {
 8000784:	b5b0      	push	{r4, r5, r7, lr}
 8000786:	b094      	sub	sp, #80	; 0x50
 8000788:	af00      	add	r7, sp, #0

	while (1) {

		while(!b_buddy.read_flag){
 800078a:	e001      	b.n	8000790 <event_loop+0xc>

			READ_CONTROLLER();
 800078c:	f000 f8e0 	bl	8000950 <READ_CONTROLLER>
		while(!b_buddy.read_flag){
 8000790:	4b65      	ldr	r3, [pc, #404]	; (8000928 <event_loop+0x1a4>)
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d0f9      	beq.n	800078c <event_loop+0x8>
		}

		DECODE_CONTROLLER();
 8000798:	f000 f8f2 	bl	8000980 <DECODE_CONTROLLER>
		b_buddy.button_state = (~b_buddy.read_buf) & 0x07;
 800079c:	4b62      	ldr	r3, [pc, #392]	; (8000928 <event_loop+0x1a4>)
 800079e:	7a1b      	ldrb	r3, [r3, #8]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	43db      	mvns	r3, r3
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2207      	movs	r2, #7
 80007a8:	4013      	ands	r3, r2
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b5e      	ldr	r3, [pc, #376]	; (8000928 <event_loop+0x1a4>)
 80007ae:	705a      	strb	r2, [r3, #1]

		switch(b_buddy.button_state){
 80007b0:	4b5d      	ldr	r3, [pc, #372]	; (8000928 <event_loop+0x1a4>)
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b05      	cmp	r3, #5
 80007b8:	d900      	bls.n	80007bc <event_loop+0x38>
 80007ba:	e09d      	b.n	80008f8 <event_loop+0x174>
 80007bc:	009a      	lsls	r2, r3, #2
 80007be:	4b5b      	ldr	r3, [pc, #364]	; (800092c <event_loop+0x1a8>)
 80007c0:	18d3      	adds	r3, r2, r3
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	469f      	mov	pc, r3
			 * Our encodings are active low because the transmitter is
			 */
			case FORWARD:
				/* set write pin, and [t2, t1, t0] = [0, 0, 0] */
				//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6 | GPIO_PIN_5 | GPIO_PIN_4, 0);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_5, 1);
 80007c6:	23a0      	movs	r3, #160	; 0xa0
 80007c8:	05db      	lsls	r3, r3, #23
 80007ca:	2201      	movs	r2, #1
 80007cc:	21a0      	movs	r1, #160	; 0xa0
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 fd0b 	bl	80011ea <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10 | GPIO_PIN_9, 0);
 80007d4:	23c0      	movs	r3, #192	; 0xc0
 80007d6:	00d9      	lsls	r1, r3, #3
 80007d8:	23a0      	movs	r3, #160	; 0xa0
 80007da:	05db      	lsls	r3, r3, #23
 80007dc:	2200      	movs	r2, #0
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 fd03 	bl	80011ea <HAL_GPIO_WritePin>

				/* Test for debugging */
				uint8_t Test1[] = "Forward!/n";
 80007e4:	243c      	movs	r4, #60	; 0x3c
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	4a51      	ldr	r2, [pc, #324]	; (8000930 <event_loop+0x1ac>)
 80007ea:	ca03      	ldmia	r2!, {r0, r1}
 80007ec:	c303      	stmia	r3!, {r0, r1}
 80007ee:	8811      	ldrh	r1, [r2, #0]
 80007f0:	8019      	strh	r1, [r3, #0]
 80007f2:	7892      	ldrb	r2, [r2, #2]
 80007f4:	709a      	strb	r2, [r3, #2]
				HAL_UART_Transmit(&hlpuart1, Test1, sizeof(Test1), 10);
 80007f6:	1939      	adds	r1, r7, r4
 80007f8:	484e      	ldr	r0, [pc, #312]	; (8000934 <event_loop+0x1b0>)
 80007fa:	230a      	movs	r3, #10
 80007fc:	220b      	movs	r2, #11
 80007fe:	f001 ff97 	bl	8002730 <HAL_UART_Transmit>

				break;
 8000802:	e079      	b.n	80008f8 <event_loop+0x174>

			case BACKWARD:
				/* set write pin, and [t2, t1, t0] = [0, 0, 1] */
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6 | GPIO_PIN_5, 0);
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10 | GPIO_PIN_9, 1);
 8000804:	23c0      	movs	r3, #192	; 0xc0
 8000806:	00d9      	lsls	r1, r3, #3
 8000808:	23a0      	movs	r3, #160	; 0xa0
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	2201      	movs	r2, #1
 800080e:	0018      	movs	r0, r3
 8000810:	f000 fceb 	bl	80011ea <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_5, 0);
 8000814:	23a0      	movs	r3, #160	; 0xa0
 8000816:	05db      	lsls	r3, r3, #23
 8000818:	2200      	movs	r2, #0
 800081a:	21a0      	movs	r1, #160	; 0xa0
 800081c:	0018      	movs	r0, r3
 800081e:	f000 fce4 	bl	80011ea <HAL_GPIO_WritePin>

				/* Test for debugging */
				uint8_t Test2[] = "Backward!/n";
 8000822:	2530      	movs	r5, #48	; 0x30
 8000824:	197b      	adds	r3, r7, r5
 8000826:	4a44      	ldr	r2, [pc, #272]	; (8000938 <event_loop+0x1b4>)
 8000828:	ca13      	ldmia	r2!, {r0, r1, r4}
 800082a:	c313      	stmia	r3!, {r0, r1, r4}
				HAL_UART_Transmit(&hlpuart1, Test2, sizeof(Test2), 10);
 800082c:	1979      	adds	r1, r7, r5
 800082e:	4841      	ldr	r0, [pc, #260]	; (8000934 <event_loop+0x1b0>)
 8000830:	230a      	movs	r3, #10
 8000832:	220c      	movs	r2, #12
 8000834:	f001 ff7c 	bl	8002730 <HAL_UART_Transmit>

				break;
 8000838:	e05e      	b.n	80008f8 <event_loop+0x174>
				/* set write pin, and [t2, t1, t0] = [0, 1, 0] */
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6 | GPIO_PIN_4, 0);
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9 | GPIO_PIN_5, 1);
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_10, 0);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 800083a:	23a0      	movs	r3, #160	; 0xa0
 800083c:	05db      	lsls	r3, r3, #23
 800083e:	2201      	movs	r2, #1
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	0018      	movs	r0, r3
 8000844:	f000 fcd1 	bl	80011ea <HAL_GPIO_WritePin>

				/* Test for debugging */
				uint8_t Test3[] = "Left!/n";
 8000848:	2428      	movs	r4, #40	; 0x28
 800084a:	193b      	adds	r3, r7, r4
 800084c:	4a3b      	ldr	r2, [pc, #236]	; (800093c <event_loop+0x1b8>)
 800084e:	ca03      	ldmia	r2!, {r0, r1}
 8000850:	c303      	stmia	r3!, {r0, r1}
				HAL_UART_Transmit(&hlpuart1, Test3, sizeof(Test3), 10);
 8000852:	1939      	adds	r1, r7, r4
 8000854:	4837      	ldr	r0, [pc, #220]	; (8000934 <event_loop+0x1b0>)
 8000856:	230a      	movs	r3, #10
 8000858:	2208      	movs	r2, #8
 800085a:	f001 ff69 	bl	8002730 <HAL_UART_Transmit>

				break;
 800085e:	e04b      	b.n	80008f8 <event_loop+0x174>
				/* set write pin, and [t2, t1, t0] = [0, 1, 1] */
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_4, 1);
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_10, 1);
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9 | GPIO_PIN_5, 0);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000860:	23a0      	movs	r3, #160	; 0xa0
 8000862:	05db      	lsls	r3, r3, #23
 8000864:	2201      	movs	r2, #1
 8000866:	2120      	movs	r1, #32
 8000868:	0018      	movs	r0, r3
 800086a:	f000 fcbe 	bl	80011ea <HAL_GPIO_WritePin>

				/* Test for debugging */
				uint8_t Test4[] = "Right!/n";
 800086e:	241c      	movs	r4, #28
 8000870:	193b      	adds	r3, r7, r4
 8000872:	4a33      	ldr	r2, [pc, #204]	; (8000940 <event_loop+0x1bc>)
 8000874:	ca03      	ldmia	r2!, {r0, r1}
 8000876:	c303      	stmia	r3!, {r0, r1}
 8000878:	7812      	ldrb	r2, [r2, #0]
 800087a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&hlpuart1, Test4, sizeof(Test4), 10);
 800087c:	1939      	adds	r1, r7, r4
 800087e:	482d      	ldr	r0, [pc, #180]	; (8000934 <event_loop+0x1b0>)
 8000880:	230a      	movs	r3, #10
 8000882:	2209      	movs	r2, #9
 8000884:	f001 ff54 	bl	8002730 <HAL_UART_Transmit>

				break;
 8000888:	e036      	b.n	80008f8 <event_loop+0x174>

			case STOP:
				/* set write pin, and [t2, t1, t0] = [0, 1, 1] */
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_4, 0);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_10 | GPIO_PIN_5 | GPIO_PIN_9, 0);
 800088a:	23d4      	movs	r3, #212	; 0xd4
 800088c:	00d9      	lsls	r1, r3, #3
 800088e:	23a0      	movs	r3, #160	; 0xa0
 8000890:	05db      	lsls	r3, r3, #23
 8000892:	2200      	movs	r2, #0
 8000894:	0018      	movs	r0, r3
 8000896:	f000 fca8 	bl	80011ea <HAL_GPIO_WritePin>

				/* Test for debugging */
				uint8_t Test5[] = "Stop!/n";
 800089a:	2414      	movs	r4, #20
 800089c:	193b      	adds	r3, r7, r4
 800089e:	4a29      	ldr	r2, [pc, #164]	; (8000944 <event_loop+0x1c0>)
 80008a0:	ca03      	ldmia	r2!, {r0, r1}
 80008a2:	c303      	stmia	r3!, {r0, r1}
				HAL_UART_Transmit(&hlpuart1, Test5, sizeof(Test5), 10);
 80008a4:	1939      	adds	r1, r7, r4
 80008a6:	4823      	ldr	r0, [pc, #140]	; (8000934 <event_loop+0x1b0>)
 80008a8:	230a      	movs	r3, #10
 80008aa:	2208      	movs	r2, #8
 80008ac:	f001 ff40 	bl	8002730 <HAL_UART_Transmit>

				break;
 80008b0:	e022      	b.n	80008f8 <event_loop+0x174>

			case SPEED_CHANGE:
			/* set write pin, and [t2, t1, t0] = [0, 1, 1] */
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_4, 0);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_10 | GPIO_PIN_5 | GPIO_PIN_9, 0);
 80008b2:	23d4      	movs	r3, #212	; 0xd4
 80008b4:	00d9      	lsls	r1, r3, #3
 80008b6:	23a0      	movs	r3, #160	; 0xa0
 80008b8:	05db      	lsls	r3, r3, #23
 80008ba:	2200      	movs	r2, #0
 80008bc:	0018      	movs	r0, r3
 80008be:	f000 fc94 	bl	80011ea <HAL_GPIO_WritePin>
				if(b_buddy.rot_speed >= 100) {
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <event_loop+0x1a4>)
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	2b63      	cmp	r3, #99	; 0x63
 80008c8:	d903      	bls.n	80008d2 <event_loop+0x14e>
					b_buddy.rot_speed = 50;
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <event_loop+0x1a4>)
 80008cc:	2232      	movs	r2, #50	; 0x32
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	e005      	b.n	80008de <event_loop+0x15a>
				}
				else {
					b_buddy.rot_speed = b_buddy.rot_speed + 10;
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <event_loop+0x1a4>)
 80008d4:	68db      	ldr	r3, [r3, #12]
 80008d6:	330a      	adds	r3, #10
 80008d8:	001a      	movs	r2, r3
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <event_loop+0x1a4>)
 80008dc:	60da      	str	r2, [r3, #12]
				}
				/* Test for debugging */
				uint8_t Test7[] = "Speed change!/n";
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	4a19      	ldr	r2, [pc, #100]	; (8000948 <event_loop+0x1c4>)
 80008e2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008e4:	c313      	stmia	r3!, {r0, r1, r4}
 80008e6:	6812      	ldr	r2, [r2, #0]
 80008e8:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&hlpuart1, Test7, sizeof(Test7), 10);
 80008ea:	1d39      	adds	r1, r7, #4
 80008ec:	4811      	ldr	r0, [pc, #68]	; (8000934 <event_loop+0x1b0>)
 80008ee:	230a      	movs	r3, #10
 80008f0:	2210      	movs	r2, #16
 80008f2:	f001 ff1d 	bl	8002730 <HAL_UART_Transmit>

				break;
 80008f6:	46c0      	nop			; (mov r8, r8)
//
//		/* extra delay just to be safe? */
//		HAL_Delay(1000);

		/* Test for debugging */
		uint8_t Test6[] = "Done!\r\n";
 80008f8:	2448      	movs	r4, #72	; 0x48
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	4a13      	ldr	r2, [pc, #76]	; (800094c <event_loop+0x1c8>)
 80008fe:	ca03      	ldmia	r2!, {r0, r1}
 8000900:	c303      	stmia	r3!, {r0, r1}
		HAL_UART_Transmit(&hlpuart1, Test6, sizeof(Test6), 10);
 8000902:	1939      	adds	r1, r7, r4
 8000904:	480b      	ldr	r0, [pc, #44]	; (8000934 <event_loop+0x1b0>)
 8000906:	230a      	movs	r3, #10
 8000908:	2208      	movs	r2, #8
 800090a:	f001 ff11 	bl	8002730 <HAL_UART_Transmit>

		// reset button state
		b_buddy.button_state = 0x00;
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <event_loop+0x1a4>)
 8000910:	2200      	movs	r2, #0
 8000912:	705a      	strb	r2, [r3, #1]
		b_buddy.read_flag = 0;
 8000914:	4b04      	ldr	r3, [pc, #16]	; (8000928 <event_loop+0x1a4>)
 8000916:	2200      	movs	r2, #0
 8000918:	605a      	str	r2, [r3, #4]
		b_buddy.read_buf = 0;
 800091a:	4b03      	ldr	r3, [pc, #12]	; (8000928 <event_loop+0x1a4>)
 800091c:	2200      	movs	r2, #0
 800091e:	721a      	strb	r2, [r3, #8]

		RUN_MOTOR();
 8000920:	f000 f87a 	bl	8000a18 <RUN_MOTOR>
	while (1) {
 8000924:	e731      	b.n	800078a <event_loop+0x6>
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	200000f0 	.word	0x200000f0
 800092c:	08003214 	.word	0x08003214
 8000930:	080031c8 	.word	0x080031c8
 8000934:	20000028 	.word	0x20000028
 8000938:	080031d4 	.word	0x080031d4
 800093c:	080031e0 	.word	0x080031e0
 8000940:	080031e8 	.word	0x080031e8
 8000944:	080031f4 	.word	0x080031f4
 8000948:	080031fc 	.word	0x080031fc
 800094c:	0800320c 	.word	0x0800320c

08000950 <READ_CONTROLLER>:
		//HAL_Delay(100);
	}
}

/* Reads our GPIO pin*/
void READ_CONTROLLER(void) {
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_7)) {b_buddy.read_flag = 1;}
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <READ_CONTROLLER+0x28>)
 8000956:	2180      	movs	r1, #128	; 0x80
 8000958:	0018      	movs	r0, r3
 800095a:	f000 fc29 	bl	80011b0 <HAL_GPIO_ReadPin>
 800095e:	1e03      	subs	r3, r0, #0
 8000960:	d003      	beq.n	800096a <READ_CONTROLLER+0x1a>
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <READ_CONTROLLER+0x2c>)
 8000964:	2201      	movs	r2, #1
 8000966:	605a      	str	r2, [r3, #4]
//	else if (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)) {b_buddy.button_state = BACKWARD;}
//	else if (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_6)) {b_buddy.button_state = LEFT;}
//	else if (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_7)) {b_buddy.button_state = RIGHT;}
	else {b_buddy.read_flag = 0;}
}
 8000968:	e002      	b.n	8000970 <READ_CONTROLLER+0x20>
	else {b_buddy.read_flag = 0;}
 800096a:	4b04      	ldr	r3, [pc, #16]	; (800097c <READ_CONTROLLER+0x2c>)
 800096c:	2200      	movs	r2, #0
 800096e:	605a      	str	r2, [r3, #4]
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	50000400 	.word	0x50000400
 800097c:	200000f0 	.word	0x200000f0

08000980 <DECODE_CONTROLLER>:

/* Decode the output of the reciever */
void DECODE_CONTROLLER(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_6)) {b_buddy.read_buf |= 4;}
 8000984:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <DECODE_CONTROLLER+0x64>)
 8000986:	2140      	movs	r1, #64	; 0x40
 8000988:	0018      	movs	r0, r3
 800098a:	f000 fc11 	bl	80011b0 <HAL_GPIO_ReadPin>
 800098e:	1e03      	subs	r3, r0, #0
 8000990:	d007      	beq.n	80009a2 <DECODE_CONTROLLER+0x22>
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <DECODE_CONTROLLER+0x68>)
 8000994:	7a1b      	ldrb	r3, [r3, #8]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2204      	movs	r2, #4
 800099a:	4313      	orrs	r3, r2
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <DECODE_CONTROLLER+0x68>)
 80009a0:	721a      	strb	r2, [r3, #8]
	if (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)) {b_buddy.read_buf |= 2;}
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <DECODE_CONTROLLER+0x64>)
 80009a4:	2120      	movs	r1, #32
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 fc02 	bl	80011b0 <HAL_GPIO_ReadPin>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d007      	beq.n	80009c0 <DECODE_CONTROLLER+0x40>
 80009b0:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <DECODE_CONTROLLER+0x68>)
 80009b2:	7a1b      	ldrb	r3, [r3, #8]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2202      	movs	r2, #2
 80009b8:	4313      	orrs	r3, r2
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <DECODE_CONTROLLER+0x68>)
 80009be:	721a      	strb	r2, [r3, #8]
	if (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4)) {b_buddy.read_buf |= 1;}
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <DECODE_CONTROLLER+0x64>)
 80009c2:	2110      	movs	r1, #16
 80009c4:	0018      	movs	r0, r3
 80009c6:	f000 fbf3 	bl	80011b0 <HAL_GPIO_ReadPin>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d007      	beq.n	80009de <DECODE_CONTROLLER+0x5e>
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <DECODE_CONTROLLER+0x68>)
 80009d0:	7a1b      	ldrb	r3, [r3, #8]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2201      	movs	r2, #1
 80009d6:	4313      	orrs	r3, r2
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <DECODE_CONTROLLER+0x68>)
 80009dc:	721a      	strb	r2, [r3, #8]
}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	50000400 	.word	0x50000400
 80009e8:	200000f0 	.word	0x200000f0

080009ec <BT_BUDDY_Init>:
/* Initialization funciton for our BotBuddy */
void BT_BUDDY_Init(void) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	b_buddy.power = 0x00;
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <BT_BUDDY_Init+0x28>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
	b_buddy.button_state = 0x00;
 80009f6:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <BT_BUDDY_Init+0x28>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	705a      	strb	r2, [r3, #1]
	b_buddy.read_flag = 0;
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <BT_BUDDY_Init+0x28>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	605a      	str	r2, [r3, #4]
	b_buddy.read_buf = 0;
 8000a02:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <BT_BUDDY_Init+0x28>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	721a      	strb	r2, [r3, #8]
	b_buddy.rot_speed = 50;
 8000a08:	4b02      	ldr	r3, [pc, #8]	; (8000a14 <BT_BUDDY_Init+0x28>)
 8000a0a:	2232      	movs	r2, #50	; 0x32
 8000a0c:	60da      	str	r2, [r3, #12]
}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200000f0 	.word	0x200000f0

08000a18 <RUN_MOTOR>:

void RUN_MOTOR(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	/* RIGHT MOTOR */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <RUN_MOTOR+0x38>)
 8000a1e:	2104      	movs	r1, #4
 8000a20:	0018      	movs	r0, r3
 8000a22:	f001 fb0b 	bl	800203c <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (PWM_PERIOD / 100) * b_buddy.rot_speed);
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <RUN_MOTOR+0x3c>)
 8000a28:	68da      	ldr	r2, [r3, #12]
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <RUN_MOTOR+0x38>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	00d2      	lsls	r2, r2, #3
 8000a30:	639a      	str	r2, [r3, #56]	; 0x38

	/* LEFT MOTOR */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <RUN_MOTOR+0x38>)
 8000a34:	2100      	movs	r1, #0
 8000a36:	0018      	movs	r0, r3
 8000a38:	f001 fb00 	bl	800203c <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (PWM_PERIOD / 100) * b_buddy.rot_speed);
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <RUN_MOTOR+0x3c>)
 8000a3e:	68da      	ldr	r2, [r3, #12]
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <RUN_MOTOR+0x38>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	00d2      	lsls	r2, r2, #3
 8000a46:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	200000b0 	.word	0x200000b0
 8000a54:	200000f0 	.word	0x200000f0

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <HAL_MspInit+0x24>)
 8000a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_MspInit+0x24>)
 8000a6e:	2101      	movs	r1, #1
 8000a70:	430a      	orrs	r2, r1
 8000a72:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <HAL_MspInit+0x24>)
 8000a76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <HAL_MspInit+0x24>)
 8000a7a:	2180      	movs	r1, #128	; 0x80
 8000a7c:	0549      	lsls	r1, r1, #21
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40021000 	.word	0x40021000

08000a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	240c      	movs	r4, #12
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	0018      	movs	r0, r3
 8000a9a:	2314      	movs	r3, #20
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f002 fb5a 	bl	8003158 <memset>
  if(huart->Instance==LPUART1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <HAL_UART_MspInit+0x80>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d129      	bne.n	8000b02 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <HAL_UART_MspInit+0x84>)
 8000ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <HAL_UART_MspInit+0x84>)
 8000ab4:	2180      	movs	r1, #128	; 0x80
 8000ab6:	02c9      	lsls	r1, r1, #11
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <HAL_UART_MspInit+0x84>)
 8000abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <HAL_UART_MspInit+0x84>)
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <HAL_UART_MspInit+0x84>)
 8000aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000acc:	2201      	movs	r2, #1
 8000ace:	4013      	ands	r3, r2
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ad4:	0021      	movs	r1, r4
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	220c      	movs	r2, #12
 8000ada:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	2202      	movs	r2, #2
 8000ae0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	2203      	movs	r2, #3
 8000aec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2206      	movs	r2, #6
 8000af2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	187a      	adds	r2, r7, r1
 8000af6:	23a0      	movs	r3, #160	; 0xa0
 8000af8:	05db      	lsls	r3, r3, #23
 8000afa:	0011      	movs	r1, r2
 8000afc:	0018      	movs	r0, r3
 8000afe:	f000 f9e9 	bl	8000ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b009      	add	sp, #36	; 0x24
 8000b08:	bd90      	pop	{r4, r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	40004800 	.word	0x40004800
 8000b10:	40021000 	.word	0x40021000

08000b14 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	05db      	lsls	r3, r3, #23
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d105      	bne.n	8000b34 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <HAL_TIM_PWM_MspInit+0x28>)
 8000b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <HAL_TIM_PWM_MspInit+0x28>)
 8000b2e:	2101      	movs	r1, #1
 8000b30:	430a      	orrs	r2, r1
 8000b32:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b002      	add	sp, #8
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40021000 	.word	0x40021000

08000b40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b08b      	sub	sp, #44	; 0x2c
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	2414      	movs	r4, #20
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	2314      	movs	r3, #20
 8000b50:	001a      	movs	r2, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	f002 fb00 	bl	8003158 <memset>
  if(htim->Instance==TIM2)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	05db      	lsls	r3, r3, #23
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d144      	bne.n	8000bee <HAL_TIM_MspPostInit+0xae>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b64:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <HAL_TIM_MspPostInit+0xb8>)
 8000b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b68:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <HAL_TIM_MspPostInit+0xb8>)
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b70:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <HAL_TIM_MspPostInit+0xb8>)
 8000b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b74:	2201      	movs	r2, #1
 8000b76:	4013      	ands	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7c:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <HAL_TIM_MspPostInit+0xb8>)
 8000b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <HAL_TIM_MspPostInit+0xb8>)
 8000b82:	2102      	movs	r1, #2
 8000b84:	430a      	orrs	r2, r1
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <HAL_TIM_MspPostInit+0xb8>)
 8000b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	4013      	ands	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	2280      	movs	r2, #128	; 0x80
 8000b98:	0212      	lsls	r2, r2, #8
 8000b9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	2205      	movs	r2, #5
 8000bb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	193a      	adds	r2, r7, r4
 8000bb6:	23a0      	movs	r3, #160	; 0xa0
 8000bb8:	05db      	lsls	r3, r3, #23
 8000bba:	0011      	movs	r1, r2
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f000 f989 	bl	8000ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bc2:	0021      	movs	r1, r4
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2208      	movs	r2, #8
 8000bc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2202      	movs	r2, #2
 8000bce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2202      	movs	r2, #2
 8000be0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <HAL_TIM_MspPostInit+0xbc>)
 8000be6:	0019      	movs	r1, r3
 8000be8:	0010      	movs	r0, r2
 8000bea:	f000 f973 	bl	8000ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b00b      	add	sp, #44	; 0x2c
 8000bf4:	bd90      	pop	{r4, r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	50000400 	.word	0x50000400

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c04:	e7fe      	b.n	8000c04 <NMI_Handler+0x4>

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <HardFault_Handler+0x4>

08000c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c24:	f000 f886 	bl	8000d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c3a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c3c:	f7ff fff7 	bl	8000c2e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c40:	480c      	ldr	r0, [pc, #48]	; (8000c74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c42:	490d      	ldr	r1, [pc, #52]	; (8000c78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c44:	4a0d      	ldr	r2, [pc, #52]	; (8000c7c <LoopForever+0xe>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c48:	e002      	b.n	8000c50 <LoopCopyDataInit>

08000c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4e:	3304      	adds	r3, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c54:	d3f9      	bcc.n	8000c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c56:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c58:	4c0a      	ldr	r4, [pc, #40]	; (8000c84 <LoopForever+0x16>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c5c:	e001      	b.n	8000c62 <LoopFillZerobss>

08000c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c60:	3204      	adds	r2, #4

08000c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c64:	d3fb      	bcc.n	8000c5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c66:	f002 fa7f 	bl	8003168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6a:	f7ff fc1d 	bl	80004a8 <main>

08000c6e <LoopForever>:

LoopForever:
    b LoopForever
 8000c6e:	e7fe      	b.n	8000c6e <LoopForever>
   ldr   r0, =_estack
 8000c70:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c7c:	080032a8 	.word	0x080032a8
  ldr r2, =_sbss
 8000c80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c84:	20000104 	.word	0x20000104

08000c88 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC1_COMP_IRQHandler>
	...

08000c8c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_Init+0x3c>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_Init+0x3c>)
 8000c9e:	2140      	movs	r1, #64	; 0x40
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f811 	bl	8000ccc <HAL_InitTick>
 8000caa:	1e03      	subs	r3, r0, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
 8000cb4:	e001      	b.n	8000cba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cb6:	f7ff fed5 	bl	8000a64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	781b      	ldrb	r3, [r3, #0]
}
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b002      	add	sp, #8
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	40022000 	.word	0x40022000

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <HAL_InitTick+0x5c>)
 8000cd6:	681c      	ldr	r4, [r3, #0]
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_InitTick+0x60>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	0019      	movs	r1, r3
 8000cde:	23fa      	movs	r3, #250	; 0xfa
 8000ce0:	0098      	lsls	r0, r3, #2
 8000ce2:	f7ff fa11 	bl	8000108 <__udivsi3>
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	0019      	movs	r1, r3
 8000cea:	0020      	movs	r0, r4
 8000cec:	f7ff fa0c 	bl	8000108 <__udivsi3>
 8000cf0:	0003      	movs	r3, r0
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f000 f8e1 	bl	8000eba <HAL_SYSTICK_Config>
 8000cf8:	1e03      	subs	r3, r0, #0
 8000cfa:	d001      	beq.n	8000d00 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e00f      	b.n	8000d20 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d80b      	bhi.n	8000d1e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	425b      	negs	r3, r3
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f000 f8be 	bl	8000e90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_InitTick+0x64>)
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e000      	b.n	8000d20 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	0018      	movs	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b003      	add	sp, #12
 8000d26:	bd90      	pop	{r4, r7, pc}
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000004 	.word	0x20000004

08000d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <HAL_IncTick+0x1c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <HAL_IncTick+0x20>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	18d2      	adds	r2, r2, r3
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_IncTick+0x20>)
 8000d46:	601a      	str	r2, [r3, #0]
}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000100 	.word	0x20000100

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <HAL_GetTick+0x10>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	0018      	movs	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	20000100 	.word	0x20000100

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	0002      	movs	r2, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d80:	d828      	bhi.n	8000dd4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d82:	4a2f      	ldr	r2, [pc, #188]	; (8000e40 <__NVIC_SetPriority+0xd4>)
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	33c0      	adds	r3, #192	; 0xc0
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	589b      	ldr	r3, [r3, r2]
 8000d92:	1dfa      	adds	r2, r7, #7
 8000d94:	7812      	ldrb	r2, [r2, #0]
 8000d96:	0011      	movs	r1, r2
 8000d98:	2203      	movs	r2, #3
 8000d9a:	400a      	ands	r2, r1
 8000d9c:	00d2      	lsls	r2, r2, #3
 8000d9e:	21ff      	movs	r1, #255	; 0xff
 8000da0:	4091      	lsls	r1, r2
 8000da2:	000a      	movs	r2, r1
 8000da4:	43d2      	mvns	r2, r2
 8000da6:	401a      	ands	r2, r3
 8000da8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	019b      	lsls	r3, r3, #6
 8000dae:	22ff      	movs	r2, #255	; 0xff
 8000db0:	401a      	ands	r2, r3
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	0018      	movs	r0, r3
 8000db8:	2303      	movs	r3, #3
 8000dba:	4003      	ands	r3, r0
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc0:	481f      	ldr	r0, [pc, #124]	; (8000e40 <__NVIC_SetPriority+0xd4>)
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	089b      	lsrs	r3, r3, #2
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	33c0      	adds	r3, #192	; 0xc0
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dd2:	e031      	b.n	8000e38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	; (8000e44 <__NVIC_SetPriority+0xd8>)
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	0019      	movs	r1, r3
 8000ddc:	230f      	movs	r3, #15
 8000dde:	400b      	ands	r3, r1
 8000de0:	3b08      	subs	r3, #8
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	3306      	adds	r3, #6
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	18d3      	adds	r3, r2, r3
 8000dea:	3304      	adds	r3, #4
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	1dfa      	adds	r2, r7, #7
 8000df0:	7812      	ldrb	r2, [r2, #0]
 8000df2:	0011      	movs	r1, r2
 8000df4:	2203      	movs	r2, #3
 8000df6:	400a      	ands	r2, r1
 8000df8:	00d2      	lsls	r2, r2, #3
 8000dfa:	21ff      	movs	r1, #255	; 0xff
 8000dfc:	4091      	lsls	r1, r2
 8000dfe:	000a      	movs	r2, r1
 8000e00:	43d2      	mvns	r2, r2
 8000e02:	401a      	ands	r2, r3
 8000e04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	019b      	lsls	r3, r3, #6
 8000e0a:	22ff      	movs	r2, #255	; 0xff
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	0018      	movs	r0, r3
 8000e14:	2303      	movs	r3, #3
 8000e16:	4003      	ands	r3, r0
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e1c:	4809      	ldr	r0, [pc, #36]	; (8000e44 <__NVIC_SetPriority+0xd8>)
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	001c      	movs	r4, r3
 8000e24:	230f      	movs	r3, #15
 8000e26:	4023      	ands	r3, r4
 8000e28:	3b08      	subs	r3, #8
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	3306      	adds	r3, #6
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	18c3      	adds	r3, r0, r3
 8000e34:	3304      	adds	r3, #4
 8000e36:	601a      	str	r2, [r3, #0]
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b003      	add	sp, #12
 8000e3e:	bd90      	pop	{r4, r7, pc}
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	1e5a      	subs	r2, r3, #1
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	045b      	lsls	r3, r3, #17
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d301      	bcc.n	8000e60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e010      	b.n	8000e82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <SysTick_Config+0x44>)
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	3a01      	subs	r2, #1
 8000e66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e68:	2301      	movs	r3, #1
 8000e6a:	425b      	negs	r3, r3
 8000e6c:	2103      	movs	r1, #3
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f7ff ff7c 	bl	8000d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SysTick_Config+0x44>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SysTick_Config+0x44>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	0018      	movs	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b002      	add	sp, #8
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	1c02      	adds	r2, r0, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b25b      	sxtb	r3, r3
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff ff5d 	bl	8000d6c <__NVIC_SetPriority>
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b004      	add	sp, #16
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff ffbf 	bl	8000e48 <SysTick_Config>
 8000eca:	0003      	movs	r3, r0
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000eea:	e149      	b.n	8001180 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	4091      	lsls	r1, r2
 8000ef6:	000a      	movs	r2, r1
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d100      	bne.n	8000f04 <HAL_GPIO_Init+0x30>
 8000f02:	e13a      	b.n	800117a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2203      	movs	r2, #3
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d005      	beq.n	8000f1c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2203      	movs	r2, #3
 8000f16:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d130      	bne.n	8000f7e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	409a      	lsls	r2, r3
 8000f2a:	0013      	movs	r3, r2
 8000f2c:	43da      	mvns	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	409a      	lsls	r2, r3
 8000f3e:	0013      	movs	r3, r2
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f52:	2201      	movs	r2, #1
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	091b      	lsrs	r3, r3, #4
 8000f68:	2201      	movs	r2, #1
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	0013      	movs	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2203      	movs	r2, #3
 8000f84:	4013      	ands	r3, r2
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d017      	beq.n	8000fba <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	409a      	lsls	r2, r3
 8000f98:	0013      	movs	r3, r2
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	409a      	lsls	r2, r3
 8000fac:	0013      	movs	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d123      	bne.n	800100e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	08da      	lsrs	r2, r3, #3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3208      	adds	r2, #8
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	58d3      	ldr	r3, [r2, r3]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	2207      	movs	r2, #7
 8000fd8:	4013      	ands	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	220f      	movs	r2, #15
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	0013      	movs	r3, r2
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	2107      	movs	r1, #7
 8000ff2:	400b      	ands	r3, r1
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	0013      	movs	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	0092      	lsls	r2, r2, #2
 800100a:	6939      	ldr	r1, [r7, #16]
 800100c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	409a      	lsls	r2, r3
 800101c:	0013      	movs	r3, r2
 800101e:	43da      	mvns	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2203      	movs	r2, #3
 800102c:	401a      	ands	r2, r3
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	409a      	lsls	r2, r3
 8001034:	0013      	movs	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	23c0      	movs	r3, #192	; 0xc0
 8001048:	029b      	lsls	r3, r3, #10
 800104a:	4013      	ands	r3, r2
 800104c:	d100      	bne.n	8001050 <HAL_GPIO_Init+0x17c>
 800104e:	e094      	b.n	800117a <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001050:	4b51      	ldr	r3, [pc, #324]	; (8001198 <HAL_GPIO_Init+0x2c4>)
 8001052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001054:	4b50      	ldr	r3, [pc, #320]	; (8001198 <HAL_GPIO_Init+0x2c4>)
 8001056:	2101      	movs	r1, #1
 8001058:	430a      	orrs	r2, r1
 800105a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800105c:	4a4f      	ldr	r2, [pc, #316]	; (800119c <HAL_GPIO_Init+0x2c8>)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	589b      	ldr	r3, [r3, r2]
 8001068:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	2203      	movs	r2, #3
 800106e:	4013      	ands	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	220f      	movs	r2, #15
 8001074:	409a      	lsls	r2, r3
 8001076:	0013      	movs	r3, r2
 8001078:	43da      	mvns	r2, r3
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	23a0      	movs	r3, #160	; 0xa0
 8001084:	05db      	lsls	r3, r3, #23
 8001086:	429a      	cmp	r2, r3
 8001088:	d013      	beq.n	80010b2 <HAL_GPIO_Init+0x1de>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a44      	ldr	r2, [pc, #272]	; (80011a0 <HAL_GPIO_Init+0x2cc>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d00d      	beq.n	80010ae <HAL_GPIO_Init+0x1da>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a43      	ldr	r2, [pc, #268]	; (80011a4 <HAL_GPIO_Init+0x2d0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d007      	beq.n	80010aa <HAL_GPIO_Init+0x1d6>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a42      	ldr	r2, [pc, #264]	; (80011a8 <HAL_GPIO_Init+0x2d4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d101      	bne.n	80010a6 <HAL_GPIO_Init+0x1d2>
 80010a2:	2305      	movs	r3, #5
 80010a4:	e006      	b.n	80010b4 <HAL_GPIO_Init+0x1e0>
 80010a6:	2306      	movs	r3, #6
 80010a8:	e004      	b.n	80010b4 <HAL_GPIO_Init+0x1e0>
 80010aa:	2302      	movs	r3, #2
 80010ac:	e002      	b.n	80010b4 <HAL_GPIO_Init+0x1e0>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <HAL_GPIO_Init+0x1e0>
 80010b2:	2300      	movs	r3, #0
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	2103      	movs	r1, #3
 80010b8:	400a      	ands	r2, r1
 80010ba:	0092      	lsls	r2, r2, #2
 80010bc:	4093      	lsls	r3, r2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c4:	4935      	ldr	r1, [pc, #212]	; (800119c <HAL_GPIO_Init+0x2c8>)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	3302      	adds	r3, #2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d2:	4b36      	ldr	r3, [pc, #216]	; (80011ac <HAL_GPIO_Init+0x2d8>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	43da      	mvns	r2, r3
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	035b      	lsls	r3, r3, #13
 80010ea:	4013      	ands	r3, r2
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010f6:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <HAL_GPIO_Init+0x2d8>)
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80010fc:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <HAL_GPIO_Init+0x2d8>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	43da      	mvns	r2, r3
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	039b      	lsls	r3, r3, #14
 8001114:	4013      	ands	r3, r2
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <HAL_GPIO_Init+0x2d8>)
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <HAL_GPIO_Init+0x2d8>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	43da      	mvns	r2, r3
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	029b      	lsls	r3, r3, #10
 800113e:	4013      	ands	r3, r2
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_GPIO_Init+0x2d8>)
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <HAL_GPIO_Init+0x2d8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	43da      	mvns	r2, r3
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	025b      	lsls	r3, r3, #9
 8001168:	4013      	ands	r3, r2
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <HAL_GPIO_Init+0x2d8>)
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3301      	adds	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	40da      	lsrs	r2, r3
 8001188:	1e13      	subs	r3, r2, #0
 800118a:	d000      	beq.n	800118e <HAL_GPIO_Init+0x2ba>
 800118c:	e6ae      	b.n	8000eec <HAL_GPIO_Init+0x18>
  }
}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	b006      	add	sp, #24
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40021000 	.word	0x40021000
 800119c:	40010000 	.word	0x40010000
 80011a0:	50000400 	.word	0x50000400
 80011a4:	50000800 	.word	0x50000800
 80011a8:	50001c00 	.word	0x50001c00
 80011ac:	40010400 	.word	0x40010400

080011b0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	000a      	movs	r2, r1
 80011ba:	1cbb      	adds	r3, r7, #2
 80011bc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	1cba      	adds	r2, r7, #2
 80011c4:	8812      	ldrh	r2, [r2, #0]
 80011c6:	4013      	ands	r3, r2
 80011c8:	d004      	beq.n	80011d4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80011ca:	230f      	movs	r3, #15
 80011cc:	18fb      	adds	r3, r7, r3
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
 80011d2:	e003      	b.n	80011dc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011d4:	230f      	movs	r3, #15
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80011dc:	230f      	movs	r3, #15
 80011de:	18fb      	adds	r3, r7, r3
 80011e0:	781b      	ldrb	r3, [r3, #0]
}
 80011e2:	0018      	movs	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b004      	add	sp, #16
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	0008      	movs	r0, r1
 80011f4:	0011      	movs	r1, r2
 80011f6:	1cbb      	adds	r3, r7, #2
 80011f8:	1c02      	adds	r2, r0, #0
 80011fa:	801a      	strh	r2, [r3, #0]
 80011fc:	1c7b      	adds	r3, r7, #1
 80011fe:	1c0a      	adds	r2, r1, #0
 8001200:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001202:	1c7b      	adds	r3, r7, #1
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800120a:	1cbb      	adds	r3, r7, #2
 800120c:	881a      	ldrh	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001212:	e003      	b.n	800121c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001214:	1cbb      	adds	r3, r7, #2
 8001216:	881a      	ldrh	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	b002      	add	sp, #8
 8001222:	bd80      	pop	{r7, pc}

08001224 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001224:	b5b0      	push	{r4, r5, r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d102      	bne.n	8001238 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	f000 fb6c 	bl	8001910 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001238:	4bc8      	ldr	r3, [pc, #800]	; (800155c <HAL_RCC_OscConfig+0x338>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	220c      	movs	r2, #12
 800123e:	4013      	ands	r3, r2
 8001240:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001242:	4bc6      	ldr	r3, [pc, #792]	; (800155c <HAL_RCC_OscConfig+0x338>)
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	025b      	lsls	r3, r3, #9
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2201      	movs	r2, #1
 8001254:	4013      	ands	r3, r2
 8001256:	d100      	bne.n	800125a <HAL_RCC_OscConfig+0x36>
 8001258:	e07d      	b.n	8001356 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	2b08      	cmp	r3, #8
 800125e:	d007      	beq.n	8001270 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	2b0c      	cmp	r3, #12
 8001264:	d112      	bne.n	800128c <HAL_RCC_OscConfig+0x68>
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	025b      	lsls	r3, r3, #9
 800126c:	429a      	cmp	r2, r3
 800126e:	d10d      	bne.n	800128c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001270:	4bba      	ldr	r3, [pc, #744]	; (800155c <HAL_RCC_OscConfig+0x338>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	029b      	lsls	r3, r3, #10
 8001278:	4013      	ands	r3, r2
 800127a:	d100      	bne.n	800127e <HAL_RCC_OscConfig+0x5a>
 800127c:	e06a      	b.n	8001354 <HAL_RCC_OscConfig+0x130>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d166      	bne.n	8001354 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	f000 fb42 	bl	8001910 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	025b      	lsls	r3, r3, #9
 8001294:	429a      	cmp	r2, r3
 8001296:	d107      	bne.n	80012a8 <HAL_RCC_OscConfig+0x84>
 8001298:	4bb0      	ldr	r3, [pc, #704]	; (800155c <HAL_RCC_OscConfig+0x338>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4baf      	ldr	r3, [pc, #700]	; (800155c <HAL_RCC_OscConfig+0x338>)
 800129e:	2180      	movs	r1, #128	; 0x80
 80012a0:	0249      	lsls	r1, r1, #9
 80012a2:	430a      	orrs	r2, r1
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	e027      	b.n	80012f8 <HAL_RCC_OscConfig+0xd4>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	23a0      	movs	r3, #160	; 0xa0
 80012ae:	02db      	lsls	r3, r3, #11
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d10e      	bne.n	80012d2 <HAL_RCC_OscConfig+0xae>
 80012b4:	4ba9      	ldr	r3, [pc, #676]	; (800155c <HAL_RCC_OscConfig+0x338>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4ba8      	ldr	r3, [pc, #672]	; (800155c <HAL_RCC_OscConfig+0x338>)
 80012ba:	2180      	movs	r1, #128	; 0x80
 80012bc:	02c9      	lsls	r1, r1, #11
 80012be:	430a      	orrs	r2, r1
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	4ba6      	ldr	r3, [pc, #664]	; (800155c <HAL_RCC_OscConfig+0x338>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4ba5      	ldr	r3, [pc, #660]	; (800155c <HAL_RCC_OscConfig+0x338>)
 80012c8:	2180      	movs	r1, #128	; 0x80
 80012ca:	0249      	lsls	r1, r1, #9
 80012cc:	430a      	orrs	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	e012      	b.n	80012f8 <HAL_RCC_OscConfig+0xd4>
 80012d2:	4ba2      	ldr	r3, [pc, #648]	; (800155c <HAL_RCC_OscConfig+0x338>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	4ba1      	ldr	r3, [pc, #644]	; (800155c <HAL_RCC_OscConfig+0x338>)
 80012d8:	49a1      	ldr	r1, [pc, #644]	; (8001560 <HAL_RCC_OscConfig+0x33c>)
 80012da:	400a      	ands	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	4b9f      	ldr	r3, [pc, #636]	; (800155c <HAL_RCC_OscConfig+0x338>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	025b      	lsls	r3, r3, #9
 80012e6:	4013      	ands	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4b9b      	ldr	r3, [pc, #620]	; (800155c <HAL_RCC_OscConfig+0x338>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b9a      	ldr	r3, [pc, #616]	; (800155c <HAL_RCC_OscConfig+0x338>)
 80012f2:	499c      	ldr	r1, [pc, #624]	; (8001564 <HAL_RCC_OscConfig+0x340>)
 80012f4:	400a      	ands	r2, r1
 80012f6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d014      	beq.n	800132a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fd2a 	bl	8000d58 <HAL_GetTick>
 8001304:	0003      	movs	r3, r0
 8001306:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800130a:	f7ff fd25 	bl	8000d58 <HAL_GetTick>
 800130e:	0002      	movs	r2, r0
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b64      	cmp	r3, #100	; 0x64
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e2f9      	b.n	8001910 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800131c:	4b8f      	ldr	r3, [pc, #572]	; (800155c <HAL_RCC_OscConfig+0x338>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	029b      	lsls	r3, r3, #10
 8001324:	4013      	ands	r3, r2
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0xe6>
 8001328:	e015      	b.n	8001356 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132a:	f7ff fd15 	bl	8000d58 <HAL_GetTick>
 800132e:	0003      	movs	r3, r0
 8001330:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fd10 	bl	8000d58 <HAL_GetTick>
 8001338:	0002      	movs	r2, r0
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e2e4      	b.n	8001910 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001346:	4b85      	ldr	r3, [pc, #532]	; (800155c <HAL_RCC_OscConfig+0x338>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	029b      	lsls	r3, r3, #10
 800134e:	4013      	ands	r3, r2
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x110>
 8001352:	e000      	b.n	8001356 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001354:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2202      	movs	r2, #2
 800135c:	4013      	ands	r3, r2
 800135e:	d100      	bne.n	8001362 <HAL_RCC_OscConfig+0x13e>
 8001360:	e099      	b.n	8001496 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	2220      	movs	r2, #32
 800136c:	4013      	ands	r3, r2
 800136e:	d009      	beq.n	8001384 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001370:	4b7a      	ldr	r3, [pc, #488]	; (800155c <HAL_RCC_OscConfig+0x338>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b79      	ldr	r3, [pc, #484]	; (800155c <HAL_RCC_OscConfig+0x338>)
 8001376:	2120      	movs	r1, #32
 8001378:	430a      	orrs	r2, r1
 800137a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	2220      	movs	r2, #32
 8001380:	4393      	bics	r3, r2
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	2b04      	cmp	r3, #4
 8001388:	d005      	beq.n	8001396 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	2b0c      	cmp	r3, #12
 800138e:	d13e      	bne.n	800140e <HAL_RCC_OscConfig+0x1ea>
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d13b      	bne.n	800140e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001396:	4b71      	ldr	r3, [pc, #452]	; (800155c <HAL_RCC_OscConfig+0x338>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2204      	movs	r2, #4
 800139c:	4013      	ands	r3, r2
 800139e:	d004      	beq.n	80013aa <HAL_RCC_OscConfig+0x186>
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e2b2      	b.n	8001910 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013aa:	4b6c      	ldr	r3, [pc, #432]	; (800155c <HAL_RCC_OscConfig+0x338>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	4a6e      	ldr	r2, [pc, #440]	; (8001568 <HAL_RCC_OscConfig+0x344>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	0019      	movs	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	021a      	lsls	r2, r3, #8
 80013ba:	4b68      	ldr	r3, [pc, #416]	; (800155c <HAL_RCC_OscConfig+0x338>)
 80013bc:	430a      	orrs	r2, r1
 80013be:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013c0:	4b66      	ldr	r3, [pc, #408]	; (800155c <HAL_RCC_OscConfig+0x338>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2209      	movs	r2, #9
 80013c6:	4393      	bics	r3, r2
 80013c8:	0019      	movs	r1, r3
 80013ca:	4b64      	ldr	r3, [pc, #400]	; (800155c <HAL_RCC_OscConfig+0x338>)
 80013cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ce:	430a      	orrs	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013d2:	f000 fbeb 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 80013d6:	0001      	movs	r1, r0
 80013d8:	4b60      	ldr	r3, [pc, #384]	; (800155c <HAL_RCC_OscConfig+0x338>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	091b      	lsrs	r3, r3, #4
 80013de:	220f      	movs	r2, #15
 80013e0:	4013      	ands	r3, r2
 80013e2:	4a62      	ldr	r2, [pc, #392]	; (800156c <HAL_RCC_OscConfig+0x348>)
 80013e4:	5cd3      	ldrb	r3, [r2, r3]
 80013e6:	000a      	movs	r2, r1
 80013e8:	40da      	lsrs	r2, r3
 80013ea:	4b61      	ldr	r3, [pc, #388]	; (8001570 <HAL_RCC_OscConfig+0x34c>)
 80013ec:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80013ee:	4b61      	ldr	r3, [pc, #388]	; (8001574 <HAL_RCC_OscConfig+0x350>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2513      	movs	r5, #19
 80013f4:	197c      	adds	r4, r7, r5
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7ff fc68 	bl	8000ccc <HAL_InitTick>
 80013fc:	0003      	movs	r3, r0
 80013fe:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001400:	197b      	adds	r3, r7, r5
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d046      	beq.n	8001496 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001408:	197b      	adds	r3, r7, r5
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	e280      	b.n	8001910 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	2b00      	cmp	r3, #0
 8001412:	d027      	beq.n	8001464 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001414:	4b51      	ldr	r3, [pc, #324]	; (800155c <HAL_RCC_OscConfig+0x338>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2209      	movs	r2, #9
 800141a:	4393      	bics	r3, r2
 800141c:	0019      	movs	r1, r3
 800141e:	4b4f      	ldr	r3, [pc, #316]	; (800155c <HAL_RCC_OscConfig+0x338>)
 8001420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001422:	430a      	orrs	r2, r1
 8001424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001426:	f7ff fc97 	bl	8000d58 <HAL_GetTick>
 800142a:	0003      	movs	r3, r0
 800142c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001430:	f7ff fc92 	bl	8000d58 <HAL_GetTick>
 8001434:	0002      	movs	r2, r0
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e266      	b.n	8001910 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001442:	4b46      	ldr	r3, [pc, #280]	; (800155c <HAL_RCC_OscConfig+0x338>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2204      	movs	r2, #4
 8001448:	4013      	ands	r3, r2
 800144a:	d0f1      	beq.n	8001430 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144c:	4b43      	ldr	r3, [pc, #268]	; (800155c <HAL_RCC_OscConfig+0x338>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	4a45      	ldr	r2, [pc, #276]	; (8001568 <HAL_RCC_OscConfig+0x344>)
 8001452:	4013      	ands	r3, r2
 8001454:	0019      	movs	r1, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	021a      	lsls	r2, r3, #8
 800145c:	4b3f      	ldr	r3, [pc, #252]	; (800155c <HAL_RCC_OscConfig+0x338>)
 800145e:	430a      	orrs	r2, r1
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	e018      	b.n	8001496 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001464:	4b3d      	ldr	r3, [pc, #244]	; (800155c <HAL_RCC_OscConfig+0x338>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b3c      	ldr	r3, [pc, #240]	; (800155c <HAL_RCC_OscConfig+0x338>)
 800146a:	2101      	movs	r1, #1
 800146c:	438a      	bics	r2, r1
 800146e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff fc72 	bl	8000d58 <HAL_GetTick>
 8001474:	0003      	movs	r3, r0
 8001476:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800147a:	f7ff fc6d 	bl	8000d58 <HAL_GetTick>
 800147e:	0002      	movs	r2, r0
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e241      	b.n	8001910 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800148c:	4b33      	ldr	r3, [pc, #204]	; (800155c <HAL_RCC_OscConfig+0x338>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2204      	movs	r2, #4
 8001492:	4013      	ands	r3, r2
 8001494:	d1f1      	bne.n	800147a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2210      	movs	r2, #16
 800149c:	4013      	ands	r3, r2
 800149e:	d100      	bne.n	80014a2 <HAL_RCC_OscConfig+0x27e>
 80014a0:	e0a1      	b.n	80015e6 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d140      	bne.n	800152a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014a8:	4b2c      	ldr	r3, [pc, #176]	; (800155c <HAL_RCC_OscConfig+0x338>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4013      	ands	r3, r2
 80014b2:	d005      	beq.n	80014c0 <HAL_RCC_OscConfig+0x29c>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e227      	b.n	8001910 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c0:	4b26      	ldr	r3, [pc, #152]	; (800155c <HAL_RCC_OscConfig+0x338>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	4a2c      	ldr	r2, [pc, #176]	; (8001578 <HAL_RCC_OscConfig+0x354>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	0019      	movs	r1, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a1a      	ldr	r2, [r3, #32]
 80014ce:	4b23      	ldr	r3, [pc, #140]	; (800155c <HAL_RCC_OscConfig+0x338>)
 80014d0:	430a      	orrs	r2, r1
 80014d2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014d4:	4b21      	ldr	r3, [pc, #132]	; (800155c <HAL_RCC_OscConfig+0x338>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	021b      	lsls	r3, r3, #8
 80014da:	0a19      	lsrs	r1, r3, #8
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	061a      	lsls	r2, r3, #24
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <HAL_RCC_OscConfig+0x338>)
 80014e4:	430a      	orrs	r2, r1
 80014e6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	0b5b      	lsrs	r3, r3, #13
 80014ee:	3301      	adds	r3, #1
 80014f0:	2280      	movs	r2, #128	; 0x80
 80014f2:	0212      	lsls	r2, r2, #8
 80014f4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014f6:	4b19      	ldr	r3, [pc, #100]	; (800155c <HAL_RCC_OscConfig+0x338>)
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	210f      	movs	r1, #15
 80014fe:	400b      	ands	r3, r1
 8001500:	491a      	ldr	r1, [pc, #104]	; (800156c <HAL_RCC_OscConfig+0x348>)
 8001502:	5ccb      	ldrb	r3, [r1, r3]
 8001504:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <HAL_RCC_OscConfig+0x34c>)
 8001508:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <HAL_RCC_OscConfig+0x350>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2513      	movs	r5, #19
 8001510:	197c      	adds	r4, r7, r5
 8001512:	0018      	movs	r0, r3
 8001514:	f7ff fbda 	bl	8000ccc <HAL_InitTick>
 8001518:	0003      	movs	r3, r0
 800151a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800151c:	197b      	adds	r3, r7, r5
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d060      	beq.n	80015e6 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001524:	197b      	adds	r3, r7, r5
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	e1f2      	b.n	8001910 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d03f      	beq.n	80015b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_RCC_OscConfig+0x338>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_RCC_OscConfig+0x338>)
 8001538:	2180      	movs	r1, #128	; 0x80
 800153a:	0049      	lsls	r1, r1, #1
 800153c:	430a      	orrs	r2, r1
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fc0a 	bl	8000d58 <HAL_GetTick>
 8001544:	0003      	movs	r3, r0
 8001546:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001548:	e018      	b.n	800157c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800154a:	f7ff fc05 	bl	8000d58 <HAL_GetTick>
 800154e:	0002      	movs	r2, r0
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d911      	bls.n	800157c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e1d9      	b.n	8001910 <HAL_RCC_OscConfig+0x6ec>
 800155c:	40021000 	.word	0x40021000
 8001560:	fffeffff 	.word	0xfffeffff
 8001564:	fffbffff 	.word	0xfffbffff
 8001568:	ffffe0ff 	.word	0xffffe0ff
 800156c:	0800322c 	.word	0x0800322c
 8001570:	20000000 	.word	0x20000000
 8001574:	20000004 	.word	0x20000004
 8001578:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800157c:	4bc9      	ldr	r3, [pc, #804]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4013      	ands	r3, r2
 8001586:	d0e0      	beq.n	800154a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001588:	4bc6      	ldr	r3, [pc, #792]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	4ac6      	ldr	r2, [pc, #792]	; (80018a8 <HAL_RCC_OscConfig+0x684>)
 800158e:	4013      	ands	r3, r2
 8001590:	0019      	movs	r1, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1a      	ldr	r2, [r3, #32]
 8001596:	4bc3      	ldr	r3, [pc, #780]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 8001598:	430a      	orrs	r2, r1
 800159a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800159c:	4bc1      	ldr	r3, [pc, #772]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	0a19      	lsrs	r1, r3, #8
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	061a      	lsls	r2, r3, #24
 80015aa:	4bbe      	ldr	r3, [pc, #760]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 80015ac:	430a      	orrs	r2, r1
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	e019      	b.n	80015e6 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015b2:	4bbc      	ldr	r3, [pc, #752]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4bbb      	ldr	r3, [pc, #748]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 80015b8:	49bc      	ldr	r1, [pc, #752]	; (80018ac <HAL_RCC_OscConfig+0x688>)
 80015ba:	400a      	ands	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff fbcb 	bl	8000d58 <HAL_GetTick>
 80015c2:	0003      	movs	r3, r0
 80015c4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015c8:	f7ff fbc6 	bl	8000d58 <HAL_GetTick>
 80015cc:	0002      	movs	r2, r0
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e19a      	b.n	8001910 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015da:	4bb2      	ldr	r3, [pc, #712]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	2380      	movs	r3, #128	; 0x80
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4013      	ands	r3, r2
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2208      	movs	r2, #8
 80015ec:	4013      	ands	r3, r2
 80015ee:	d036      	beq.n	800165e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d019      	beq.n	800162c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f8:	4baa      	ldr	r3, [pc, #680]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 80015fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015fc:	4ba9      	ldr	r3, [pc, #676]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 80015fe:	2101      	movs	r1, #1
 8001600:	430a      	orrs	r2, r1
 8001602:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001604:	f7ff fba8 	bl	8000d58 <HAL_GetTick>
 8001608:	0003      	movs	r3, r0
 800160a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800160e:	f7ff fba3 	bl	8000d58 <HAL_GetTick>
 8001612:	0002      	movs	r2, r0
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e177      	b.n	8001910 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001620:	4ba0      	ldr	r3, [pc, #640]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 8001622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001624:	2202      	movs	r2, #2
 8001626:	4013      	ands	r3, r2
 8001628:	d0f1      	beq.n	800160e <HAL_RCC_OscConfig+0x3ea>
 800162a:	e018      	b.n	800165e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800162c:	4b9d      	ldr	r3, [pc, #628]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 800162e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001630:	4b9c      	ldr	r3, [pc, #624]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 8001632:	2101      	movs	r1, #1
 8001634:	438a      	bics	r2, r1
 8001636:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001638:	f7ff fb8e 	bl	8000d58 <HAL_GetTick>
 800163c:	0003      	movs	r3, r0
 800163e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001642:	f7ff fb89 	bl	8000d58 <HAL_GetTick>
 8001646:	0002      	movs	r2, r0
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e15d      	b.n	8001910 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001654:	4b93      	ldr	r3, [pc, #588]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 8001656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001658:	2202      	movs	r2, #2
 800165a:	4013      	ands	r3, r2
 800165c:	d1f1      	bne.n	8001642 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2204      	movs	r2, #4
 8001664:	4013      	ands	r3, r2
 8001666:	d100      	bne.n	800166a <HAL_RCC_OscConfig+0x446>
 8001668:	e0ae      	b.n	80017c8 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800166a:	2023      	movs	r0, #35	; 0x23
 800166c:	183b      	adds	r3, r7, r0
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001672:	4b8c      	ldr	r3, [pc, #560]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 8001674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	055b      	lsls	r3, r3, #21
 800167a:	4013      	ands	r3, r2
 800167c:	d109      	bne.n	8001692 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b89      	ldr	r3, [pc, #548]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 8001680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001682:	4b88      	ldr	r3, [pc, #544]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	0549      	lsls	r1, r1, #21
 8001688:	430a      	orrs	r2, r1
 800168a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800168c:	183b      	adds	r3, r7, r0
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001692:	4b87      	ldr	r3, [pc, #540]	; (80018b0 <HAL_RCC_OscConfig+0x68c>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4013      	ands	r3, r2
 800169c:	d11a      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800169e:	4b84      	ldr	r3, [pc, #528]	; (80018b0 <HAL_RCC_OscConfig+0x68c>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	4b83      	ldr	r3, [pc, #524]	; (80018b0 <HAL_RCC_OscConfig+0x68c>)
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	0049      	lsls	r1, r1, #1
 80016a8:	430a      	orrs	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ac:	f7ff fb54 	bl	8000d58 <HAL_GetTick>
 80016b0:	0003      	movs	r3, r0
 80016b2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b6:	f7ff fb4f 	bl	8000d58 <HAL_GetTick>
 80016ba:	0002      	movs	r2, r0
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b64      	cmp	r3, #100	; 0x64
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e123      	b.n	8001910 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c8:	4b79      	ldr	r3, [pc, #484]	; (80018b0 <HAL_RCC_OscConfig+0x68c>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4013      	ands	r3, r2
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	429a      	cmp	r2, r3
 80016de:	d107      	bne.n	80016f0 <HAL_RCC_OscConfig+0x4cc>
 80016e0:	4b70      	ldr	r3, [pc, #448]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 80016e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016e4:	4b6f      	ldr	r3, [pc, #444]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 80016e6:	2180      	movs	r1, #128	; 0x80
 80016e8:	0049      	lsls	r1, r1, #1
 80016ea:	430a      	orrs	r2, r1
 80016ec:	651a      	str	r2, [r3, #80]	; 0x50
 80016ee:	e031      	b.n	8001754 <HAL_RCC_OscConfig+0x530>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10c      	bne.n	8001712 <HAL_RCC_OscConfig+0x4ee>
 80016f8:	4b6a      	ldr	r3, [pc, #424]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 80016fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016fc:	4b69      	ldr	r3, [pc, #420]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 80016fe:	496b      	ldr	r1, [pc, #428]	; (80018ac <HAL_RCC_OscConfig+0x688>)
 8001700:	400a      	ands	r2, r1
 8001702:	651a      	str	r2, [r3, #80]	; 0x50
 8001704:	4b67      	ldr	r3, [pc, #412]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 8001706:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001708:	4b66      	ldr	r3, [pc, #408]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 800170a:	496a      	ldr	r1, [pc, #424]	; (80018b4 <HAL_RCC_OscConfig+0x690>)
 800170c:	400a      	ands	r2, r1
 800170e:	651a      	str	r2, [r3, #80]	; 0x50
 8001710:	e020      	b.n	8001754 <HAL_RCC_OscConfig+0x530>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	23a0      	movs	r3, #160	; 0xa0
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	429a      	cmp	r2, r3
 800171c:	d10e      	bne.n	800173c <HAL_RCC_OscConfig+0x518>
 800171e:	4b61      	ldr	r3, [pc, #388]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 8001720:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001722:	4b60      	ldr	r3, [pc, #384]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	00c9      	lsls	r1, r1, #3
 8001728:	430a      	orrs	r2, r1
 800172a:	651a      	str	r2, [r3, #80]	; 0x50
 800172c:	4b5d      	ldr	r3, [pc, #372]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 800172e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001730:	4b5c      	ldr	r3, [pc, #368]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	0049      	lsls	r1, r1, #1
 8001736:	430a      	orrs	r2, r1
 8001738:	651a      	str	r2, [r3, #80]	; 0x50
 800173a:	e00b      	b.n	8001754 <HAL_RCC_OscConfig+0x530>
 800173c:	4b59      	ldr	r3, [pc, #356]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 800173e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001740:	4b58      	ldr	r3, [pc, #352]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 8001742:	495a      	ldr	r1, [pc, #360]	; (80018ac <HAL_RCC_OscConfig+0x688>)
 8001744:	400a      	ands	r2, r1
 8001746:	651a      	str	r2, [r3, #80]	; 0x50
 8001748:	4b56      	ldr	r3, [pc, #344]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 800174a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800174c:	4b55      	ldr	r3, [pc, #340]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 800174e:	4959      	ldr	r1, [pc, #356]	; (80018b4 <HAL_RCC_OscConfig+0x690>)
 8001750:	400a      	ands	r2, r1
 8001752:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d015      	beq.n	8001788 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175c:	f7ff fafc 	bl	8000d58 <HAL_GetTick>
 8001760:	0003      	movs	r3, r0
 8001762:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001764:	e009      	b.n	800177a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001766:	f7ff faf7 	bl	8000d58 <HAL_GetTick>
 800176a:	0002      	movs	r2, r0
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	4a51      	ldr	r2, [pc, #324]	; (80018b8 <HAL_RCC_OscConfig+0x694>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e0ca      	b.n	8001910 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800177a:	4b4a      	ldr	r3, [pc, #296]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 800177c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4013      	ands	r3, r2
 8001784:	d0ef      	beq.n	8001766 <HAL_RCC_OscConfig+0x542>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001788:	f7ff fae6 	bl	8000d58 <HAL_GetTick>
 800178c:	0003      	movs	r3, r0
 800178e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001790:	e009      	b.n	80017a6 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7ff fae1 	bl	8000d58 <HAL_GetTick>
 8001796:	0002      	movs	r2, r0
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	4a46      	ldr	r2, [pc, #280]	; (80018b8 <HAL_RCC_OscConfig+0x694>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e0b4      	b.n	8001910 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017a6:	4b3f      	ldr	r3, [pc, #252]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 80017a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4013      	ands	r3, r2
 80017b0:	d1ef      	bne.n	8001792 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017b2:	2323      	movs	r3, #35	; 0x23
 80017b4:	18fb      	adds	r3, r7, r3
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d105      	bne.n	80017c8 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017bc:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 80017be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017c0:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 80017c2:	493e      	ldr	r1, [pc, #248]	; (80018bc <HAL_RCC_OscConfig+0x698>)
 80017c4:	400a      	ands	r2, r1
 80017c6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d100      	bne.n	80017d2 <HAL_RCC_OscConfig+0x5ae>
 80017d0:	e09d      	b.n	800190e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	2b0c      	cmp	r3, #12
 80017d6:	d100      	bne.n	80017da <HAL_RCC_OscConfig+0x5b6>
 80017d8:	e076      	b.n	80018c8 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d145      	bne.n	800186e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e2:	4b30      	ldr	r3, [pc, #192]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 80017e8:	4935      	ldr	r1, [pc, #212]	; (80018c0 <HAL_RCC_OscConfig+0x69c>)
 80017ea:	400a      	ands	r2, r1
 80017ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ee:	f7ff fab3 	bl	8000d58 <HAL_GetTick>
 80017f2:	0003      	movs	r3, r0
 80017f4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff faae 	bl	8000d58 <HAL_GetTick>
 80017fc:	0002      	movs	r2, r0
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e082      	b.n	8001910 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800180a:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	049b      	lsls	r3, r3, #18
 8001812:	4013      	ands	r3, r2
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001816:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	4a2a      	ldr	r2, [pc, #168]	; (80018c4 <HAL_RCC_OscConfig+0x6a0>)
 800181c:	4013      	ands	r3, r2
 800181e:	0019      	movs	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	431a      	orrs	r2, r3
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 8001832:	430a      	orrs	r2, r1
 8001834:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001836:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 800183c:	2180      	movs	r1, #128	; 0x80
 800183e:	0449      	lsls	r1, r1, #17
 8001840:	430a      	orrs	r2, r1
 8001842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff fa88 	bl	8000d58 <HAL_GetTick>
 8001848:	0003      	movs	r3, r0
 800184a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184e:	f7ff fa83 	bl	8000d58 <HAL_GetTick>
 8001852:	0002      	movs	r2, r0
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e057      	b.n	8001910 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001860:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	049b      	lsls	r3, r3, #18
 8001868:	4013      	ands	r3, r2
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0x62a>
 800186c:	e04f      	b.n	800190e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186e:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 8001874:	4912      	ldr	r1, [pc, #72]	; (80018c0 <HAL_RCC_OscConfig+0x69c>)
 8001876:	400a      	ands	r2, r1
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187a:	f7ff fa6d 	bl	8000d58 <HAL_GetTick>
 800187e:	0003      	movs	r3, r0
 8001880:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff fa68 	bl	8000d58 <HAL_GetTick>
 8001888:	0002      	movs	r2, r0
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e03c      	b.n	8001910 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001896:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <HAL_RCC_OscConfig+0x680>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	049b      	lsls	r3, r3, #18
 800189e:	4013      	ands	r3, r2
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x660>
 80018a2:	e034      	b.n	800190e <HAL_RCC_OscConfig+0x6ea>
 80018a4:	40021000 	.word	0x40021000
 80018a8:	ffff1fff 	.word	0xffff1fff
 80018ac:	fffffeff 	.word	0xfffffeff
 80018b0:	40007000 	.word	0x40007000
 80018b4:	fffffbff 	.word	0xfffffbff
 80018b8:	00001388 	.word	0x00001388
 80018bc:	efffffff 	.word	0xefffffff
 80018c0:	feffffff 	.word	0xfeffffff
 80018c4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e01d      	b.n	8001910 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018d4:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_RCC_OscConfig+0x6f4>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	025b      	lsls	r3, r3, #9
 80018e0:	401a      	ands	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d10f      	bne.n	800190a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	23f0      	movs	r3, #240	; 0xf0
 80018ee:	039b      	lsls	r3, r3, #14
 80018f0:	401a      	ands	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d107      	bne.n	800190a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	23c0      	movs	r3, #192	; 0xc0
 80018fe:	041b      	lsls	r3, r3, #16
 8001900:	401a      	ands	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001906:	429a      	cmp	r2, r3
 8001908:	d001      	beq.n	800190e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	0018      	movs	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	b00a      	add	sp, #40	; 0x28
 8001916:	bdb0      	pop	{r4, r5, r7, pc}
 8001918:	40021000 	.word	0x40021000

0800191c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800191c:	b5b0      	push	{r4, r5, r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e128      	b.n	8001b82 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001930:	4b96      	ldr	r3, [pc, #600]	; (8001b8c <HAL_RCC_ClockConfig+0x270>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2201      	movs	r2, #1
 8001936:	4013      	ands	r3, r2
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d91e      	bls.n	800197c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193e:	4b93      	ldr	r3, [pc, #588]	; (8001b8c <HAL_RCC_ClockConfig+0x270>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2201      	movs	r2, #1
 8001944:	4393      	bics	r3, r2
 8001946:	0019      	movs	r1, r3
 8001948:	4b90      	ldr	r3, [pc, #576]	; (8001b8c <HAL_RCC_ClockConfig+0x270>)
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001950:	f7ff fa02 	bl	8000d58 <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001958:	e009      	b.n	800196e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195a:	f7ff f9fd 	bl	8000d58 <HAL_GetTick>
 800195e:	0002      	movs	r2, r0
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	4a8a      	ldr	r2, [pc, #552]	; (8001b90 <HAL_RCC_ClockConfig+0x274>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e109      	b.n	8001b82 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800196e:	4b87      	ldr	r3, [pc, #540]	; (8001b8c <HAL_RCC_ClockConfig+0x270>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2201      	movs	r2, #1
 8001974:	4013      	ands	r3, r2
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d1ee      	bne.n	800195a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2202      	movs	r2, #2
 8001982:	4013      	ands	r3, r2
 8001984:	d009      	beq.n	800199a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001986:	4b83      	ldr	r3, [pc, #524]	; (8001b94 <HAL_RCC_ClockConfig+0x278>)
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	22f0      	movs	r2, #240	; 0xf0
 800198c:	4393      	bics	r3, r2
 800198e:	0019      	movs	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	4b7f      	ldr	r3, [pc, #508]	; (8001b94 <HAL_RCC_ClockConfig+0x278>)
 8001996:	430a      	orrs	r2, r1
 8001998:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2201      	movs	r2, #1
 80019a0:	4013      	ands	r3, r2
 80019a2:	d100      	bne.n	80019a6 <HAL_RCC_ClockConfig+0x8a>
 80019a4:	e089      	b.n	8001aba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d107      	bne.n	80019be <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019ae:	4b79      	ldr	r3, [pc, #484]	; (8001b94 <HAL_RCC_ClockConfig+0x278>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	029b      	lsls	r3, r3, #10
 80019b6:	4013      	ands	r3, r2
 80019b8:	d120      	bne.n	80019fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e0e1      	b.n	8001b82 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019c6:	4b73      	ldr	r3, [pc, #460]	; (8001b94 <HAL_RCC_ClockConfig+0x278>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	049b      	lsls	r3, r3, #18
 80019ce:	4013      	ands	r3, r2
 80019d0:	d114      	bne.n	80019fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e0d5      	b.n	8001b82 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d106      	bne.n	80019ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019de:	4b6d      	ldr	r3, [pc, #436]	; (8001b94 <HAL_RCC_ClockConfig+0x278>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2204      	movs	r2, #4
 80019e4:	4013      	ands	r3, r2
 80019e6:	d109      	bne.n	80019fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0ca      	b.n	8001b82 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019ec:	4b69      	ldr	r3, [pc, #420]	; (8001b94 <HAL_RCC_ClockConfig+0x278>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4013      	ands	r3, r2
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0c2      	b.n	8001b82 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019fc:	4b65      	ldr	r3, [pc, #404]	; (8001b94 <HAL_RCC_ClockConfig+0x278>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2203      	movs	r2, #3
 8001a02:	4393      	bics	r3, r2
 8001a04:	0019      	movs	r1, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	4b62      	ldr	r3, [pc, #392]	; (8001b94 <HAL_RCC_ClockConfig+0x278>)
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a10:	f7ff f9a2 	bl	8000d58 <HAL_GetTick>
 8001a14:	0003      	movs	r3, r0
 8001a16:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d111      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a20:	e009      	b.n	8001a36 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a22:	f7ff f999 	bl	8000d58 <HAL_GetTick>
 8001a26:	0002      	movs	r2, r0
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	4a58      	ldr	r2, [pc, #352]	; (8001b90 <HAL_RCC_ClockConfig+0x274>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e0a5      	b.n	8001b82 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a36:	4b57      	ldr	r3, [pc, #348]	; (8001b94 <HAL_RCC_ClockConfig+0x278>)
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d1ef      	bne.n	8001a22 <HAL_RCC_ClockConfig+0x106>
 8001a42:	e03a      	b.n	8001aba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d111      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a4c:	e009      	b.n	8001a62 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4e:	f7ff f983 	bl	8000d58 <HAL_GetTick>
 8001a52:	0002      	movs	r2, r0
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	4a4d      	ldr	r2, [pc, #308]	; (8001b90 <HAL_RCC_ClockConfig+0x274>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e08f      	b.n	8001b82 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a62:	4b4c      	ldr	r3, [pc, #304]	; (8001b94 <HAL_RCC_ClockConfig+0x278>)
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	220c      	movs	r2, #12
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b0c      	cmp	r3, #12
 8001a6c:	d1ef      	bne.n	8001a4e <HAL_RCC_ClockConfig+0x132>
 8001a6e:	e024      	b.n	8001aba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d11b      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a78:	e009      	b.n	8001a8e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7a:	f7ff f96d 	bl	8000d58 <HAL_GetTick>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	4a42      	ldr	r2, [pc, #264]	; (8001b90 <HAL_RCC_ClockConfig+0x274>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e079      	b.n	8001b82 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a8e:	4b41      	ldr	r3, [pc, #260]	; (8001b94 <HAL_RCC_ClockConfig+0x278>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	220c      	movs	r2, #12
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d1ef      	bne.n	8001a7a <HAL_RCC_ClockConfig+0x15e>
 8001a9a:	e00e      	b.n	8001aba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9c:	f7ff f95c 	bl	8000d58 <HAL_GetTick>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	4a3a      	ldr	r2, [pc, #232]	; (8001b90 <HAL_RCC_ClockConfig+0x274>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e068      	b.n	8001b82 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ab0:	4b38      	ldr	r3, [pc, #224]	; (8001b94 <HAL_RCC_ClockConfig+0x278>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	220c      	movs	r2, #12
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aba:	4b34      	ldr	r3, [pc, #208]	; (8001b8c <HAL_RCC_ClockConfig+0x270>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d21e      	bcs.n	8001b06 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac8:	4b30      	ldr	r3, [pc, #192]	; (8001b8c <HAL_RCC_ClockConfig+0x270>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2201      	movs	r2, #1
 8001ace:	4393      	bics	r3, r2
 8001ad0:	0019      	movs	r1, r3
 8001ad2:	4b2e      	ldr	r3, [pc, #184]	; (8001b8c <HAL_RCC_ClockConfig+0x270>)
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ada:	f7ff f93d 	bl	8000d58 <HAL_GetTick>
 8001ade:	0003      	movs	r3, r0
 8001ae0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae2:	e009      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae4:	f7ff f938 	bl	8000d58 <HAL_GetTick>
 8001ae8:	0002      	movs	r2, r0
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	4a28      	ldr	r2, [pc, #160]	; (8001b90 <HAL_RCC_ClockConfig+0x274>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e044      	b.n	8001b82 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af8:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <HAL_RCC_ClockConfig+0x270>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2201      	movs	r2, #1
 8001afe:	4013      	ands	r3, r2
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d1ee      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d009      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b10:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <HAL_RCC_ClockConfig+0x278>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	4a20      	ldr	r2, [pc, #128]	; (8001b98 <HAL_RCC_ClockConfig+0x27c>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	0019      	movs	r1, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <HAL_RCC_ClockConfig+0x278>)
 8001b20:	430a      	orrs	r2, r1
 8001b22:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2208      	movs	r2, #8
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d00a      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b2e:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <HAL_RCC_ClockConfig+0x278>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	4a1a      	ldr	r2, [pc, #104]	; (8001b9c <HAL_RCC_ClockConfig+0x280>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	0019      	movs	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	00da      	lsls	r2, r3, #3
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <HAL_RCC_ClockConfig+0x278>)
 8001b40:	430a      	orrs	r2, r1
 8001b42:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b44:	f000 f832 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 8001b48:	0001      	movs	r1, r0
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_RCC_ClockConfig+0x278>)
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	091b      	lsrs	r3, r3, #4
 8001b50:	220f      	movs	r2, #15
 8001b52:	4013      	ands	r3, r2
 8001b54:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <HAL_RCC_ClockConfig+0x284>)
 8001b56:	5cd3      	ldrb	r3, [r2, r3]
 8001b58:	000a      	movs	r2, r1
 8001b5a:	40da      	lsrs	r2, r3
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <HAL_RCC_ClockConfig+0x288>)
 8001b5e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_RCC_ClockConfig+0x28c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	250b      	movs	r5, #11
 8001b66:	197c      	adds	r4, r7, r5
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f7ff f8af 	bl	8000ccc <HAL_InitTick>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001b72:	197b      	adds	r3, r7, r5
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001b7a:	197b      	adds	r3, r7, r5
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	e000      	b.n	8001b82 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	0018      	movs	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b004      	add	sp, #16
 8001b88:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	40022000 	.word	0x40022000
 8001b90:	00001388 	.word	0x00001388
 8001b94:	40021000 	.word	0x40021000
 8001b98:	fffff8ff 	.word	0xfffff8ff
 8001b9c:	ffffc7ff 	.word	0xffffc7ff
 8001ba0:	0800322c 	.word	0x0800322c
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	20000004 	.word	0x20000004

08001bac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bac:	b5b0      	push	{r4, r5, r7, lr}
 8001bae:	b08e      	sub	sp, #56	; 0x38
 8001bb0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001bb2:	4b4c      	ldr	r3, [pc, #304]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bba:	230c      	movs	r3, #12
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b0c      	cmp	r3, #12
 8001bc0:	d014      	beq.n	8001bec <HAL_RCC_GetSysClockFreq+0x40>
 8001bc2:	d900      	bls.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x1a>
 8001bc4:	e07b      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0x112>
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d002      	beq.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x24>
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d00b      	beq.n	8001be6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bce:	e076      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001bd0:	4b44      	ldr	r3, [pc, #272]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2210      	movs	r2, #16
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d002      	beq.n	8001be0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001bda:	4b43      	ldr	r3, [pc, #268]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001bdc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001bde:	e07c      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001be0:	4b42      	ldr	r3, [pc, #264]	; (8001cec <HAL_RCC_GetSysClockFreq+0x140>)
 8001be2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001be4:	e079      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001be6:	4b42      	ldr	r3, [pc, #264]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001be8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bea:	e076      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bee:	0c9a      	lsrs	r2, r3, #18
 8001bf0:	230f      	movs	r3, #15
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	4b3f      	ldr	r3, [pc, #252]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x148>)
 8001bf6:	5c9b      	ldrb	r3, [r3, r2]
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfc:	0d9a      	lsrs	r2, r3, #22
 8001bfe:	2303      	movs	r3, #3
 8001c00:	4013      	ands	r3, r2
 8001c02:	3301      	adds	r3, #1
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c06:	4b37      	ldr	r3, [pc, #220]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	025b      	lsls	r3, r3, #9
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d01a      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	4a35      	ldr	r2, [pc, #212]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	69b8      	ldr	r0, [r7, #24]
 8001c20:	69f9      	ldr	r1, [r7, #28]
 8001c22:	f7fe fb1d 	bl	8000260 <__aeabi_lmul>
 8001c26:	0002      	movs	r2, r0
 8001c28:	000b      	movs	r3, r1
 8001c2a:	0010      	movs	r0, r2
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f7fe faf1 	bl	8000220 <__aeabi_uldivmod>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	000b      	movs	r3, r1
 8001c42:	0013      	movs	r3, r2
 8001c44:	637b      	str	r3, [r7, #52]	; 0x34
 8001c46:	e037      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c48:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2210      	movs	r2, #16
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d01a      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4a23      	ldr	r2, [pc, #140]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	68b8      	ldr	r0, [r7, #8]
 8001c60:	68f9      	ldr	r1, [r7, #12]
 8001c62:	f7fe fafd 	bl	8000260 <__aeabi_lmul>
 8001c66:	0002      	movs	r2, r0
 8001c68:	000b      	movs	r3, r1
 8001c6a:	0010      	movs	r0, r2
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	603b      	str	r3, [r7, #0]
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f7fe fad1 	bl	8000220 <__aeabi_uldivmod>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	000b      	movs	r3, r1
 8001c82:	0013      	movs	r3, r2
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
 8001c86:	e017      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	0019      	movs	r1, r3
 8001c90:	4a16      	ldr	r2, [pc, #88]	; (8001cec <HAL_RCC_GetSysClockFreq+0x140>)
 8001c92:	2300      	movs	r3, #0
 8001c94:	f7fe fae4 	bl	8000260 <__aeabi_lmul>
 8001c98:	0002      	movs	r2, r0
 8001c9a:	000b      	movs	r3, r1
 8001c9c:	0010      	movs	r0, r2
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	001c      	movs	r4, r3
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	001d      	movs	r5, r3
 8001ca8:	0022      	movs	r2, r4
 8001caa:	002b      	movs	r3, r5
 8001cac:	f7fe fab8 	bl	8000220 <__aeabi_uldivmod>
 8001cb0:	0002      	movs	r2, r0
 8001cb2:	000b      	movs	r3, r1
 8001cb4:	0013      	movs	r3, r2
 8001cb6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cbc:	e00d      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	0b5b      	lsrs	r3, r3, #13
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	0212      	lsls	r2, r2, #8
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	0013      	movs	r3, r2
 8001cd6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cd8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b00e      	add	sp, #56	; 0x38
 8001ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	003d0900 	.word	0x003d0900
 8001cec:	00f42400 	.word	0x00f42400
 8001cf0:	007a1200 	.word	0x007a1200
 8001cf4:	08003244 	.word	0x08003244

08001cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cfc:	4b02      	ldr	r3, [pc, #8]	; (8001d08 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	0018      	movs	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	20000000 	.word	0x20000000

08001d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d10:	f7ff fff2 	bl	8001cf8 <HAL_RCC_GetHCLKFreq>
 8001d14:	0001      	movs	r1, r0
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	0a1b      	lsrs	r3, r3, #8
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	4013      	ands	r3, r2
 8001d20:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d22:	5cd3      	ldrb	r3, [r2, r3]
 8001d24:	40d9      	lsrs	r1, r3
 8001d26:	000b      	movs	r3, r1
}
 8001d28:	0018      	movs	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	40021000 	.word	0x40021000
 8001d34:	0800323c 	.word	0x0800323c

08001d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d3c:	f7ff ffdc 	bl	8001cf8 <HAL_RCC_GetHCLKFreq>
 8001d40:	0001      	movs	r1, r0
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	0adb      	lsrs	r3, r3, #11
 8001d48:	2207      	movs	r2, #7
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d4e:	5cd3      	ldrb	r3, [r2, r3]
 8001d50:	40d9      	lsrs	r1, r3
 8001d52:	000b      	movs	r3, r1
}
 8001d54:	0018      	movs	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	0800323c 	.word	0x0800323c

08001d64 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001d6c:	2017      	movs	r0, #23
 8001d6e:	183b      	adds	r3, r7, r0
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d100      	bne.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001d7e:	e0c7      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d80:	4b84      	ldr	r3, [pc, #528]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	055b      	lsls	r3, r3, #21
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d109      	bne.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8c:	4b81      	ldr	r3, [pc, #516]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d90:	4b80      	ldr	r3, [pc, #512]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d92:	2180      	movs	r1, #128	; 0x80
 8001d94:	0549      	lsls	r1, r1, #21
 8001d96:	430a      	orrs	r2, r1
 8001d98:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d9a:	183b      	adds	r3, r7, r0
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	4b7d      	ldr	r3, [pc, #500]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4013      	ands	r3, r2
 8001daa:	d11a      	bne.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dac:	4b7a      	ldr	r3, [pc, #488]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b79      	ldr	r3, [pc, #484]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001db2:	2180      	movs	r1, #128	; 0x80
 8001db4:	0049      	lsls	r1, r1, #1
 8001db6:	430a      	orrs	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dba:	f7fe ffcd 	bl	8000d58 <HAL_GetTick>
 8001dbe:	0003      	movs	r3, r0
 8001dc0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc4:	f7fe ffc8 	bl	8000d58 <HAL_GetTick>
 8001dc8:	0002      	movs	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	; 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e0d9      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd6:	4b70      	ldr	r3, [pc, #448]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4013      	ands	r3, r2
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001de2:	4b6c      	ldr	r3, [pc, #432]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	23c0      	movs	r3, #192	; 0xc0
 8001de8:	039b      	lsls	r3, r3, #14
 8001dea:	4013      	ands	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	23c0      	movs	r3, #192	; 0xc0
 8001df4:	039b      	lsls	r3, r3, #14
 8001df6:	4013      	ands	r3, r2
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d013      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	23c0      	movs	r3, #192	; 0xc0
 8001e04:	029b      	lsls	r3, r3, #10
 8001e06:	401a      	ands	r2, r3
 8001e08:	23c0      	movs	r3, #192	; 0xc0
 8001e0a:	029b      	lsls	r3, r3, #10
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d10a      	bne.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001e10:	4b60      	ldr	r3, [pc, #384]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	029b      	lsls	r3, r3, #10
 8001e18:	401a      	ands	r2, r3
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	029b      	lsls	r3, r3, #10
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d101      	bne.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e0b1      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001e26:	4b5b      	ldr	r3, [pc, #364]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e2a:	23c0      	movs	r3, #192	; 0xc0
 8001e2c:	029b      	lsls	r3, r3, #10
 8001e2e:	4013      	ands	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d03b      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	23c0      	movs	r3, #192	; 0xc0
 8001e3e:	029b      	lsls	r3, r3, #10
 8001e40:	4013      	ands	r3, r2
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d033      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d02e      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001e52:	4b50      	ldr	r3, [pc, #320]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e56:	4a51      	ldr	r2, [pc, #324]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e5c:	4b4d      	ldr	r3, [pc, #308]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e60:	4b4c      	ldr	r3, [pc, #304]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e62:	2180      	movs	r1, #128	; 0x80
 8001e64:	0309      	lsls	r1, r1, #12
 8001e66:	430a      	orrs	r2, r1
 8001e68:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e6a:	4b4a      	ldr	r3, [pc, #296]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e6e:	4b49      	ldr	r3, [pc, #292]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e70:	494b      	ldr	r1, [pc, #300]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001e72:	400a      	ands	r2, r1
 8001e74:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001e76:	4b47      	ldr	r3, [pc, #284]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	2380      	movs	r3, #128	; 0x80
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4013      	ands	r3, r2
 8001e84:	d014      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7fe ff67 	bl	8000d58 <HAL_GetTick>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e8e:	e009      	b.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e90:	f7fe ff62 	bl	8000d58 <HAL_GetTick>
 8001e94:	0002      	movs	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	4a42      	ldr	r2, [pc, #264]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e072      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ea4:	4b3b      	ldr	r3, [pc, #236]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ea6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4013      	ands	r3, r2
 8001eae:	d0ef      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d01f      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	23c0      	movs	r3, #192	; 0xc0
 8001ec0:	029b      	lsls	r3, r3, #10
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	23c0      	movs	r3, #192	; 0xc0
 8001ec6:	029b      	lsls	r3, r3, #10
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d10c      	bne.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001ecc:	4b31      	ldr	r3, [pc, #196]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a35      	ldr	r2, [pc, #212]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	0019      	movs	r1, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	23c0      	movs	r3, #192	; 0xc0
 8001edc:	039b      	lsls	r3, r3, #14
 8001ede:	401a      	ands	r2, r3
 8001ee0:	4b2c      	ldr	r3, [pc, #176]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	4b2b      	ldr	r3, [pc, #172]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ee8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	23c0      	movs	r3, #192	; 0xc0
 8001ef0:	029b      	lsls	r3, r3, #10
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001efa:	2317      	movs	r3, #23
 8001efc:	18fb      	adds	r3, r7, r3
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d105      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f04:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f08:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f0a:	4928      	ldr	r1, [pc, #160]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2202      	movs	r2, #2
 8001f16:	4013      	ands	r3, r2
 8001f18:	d009      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1e:	220c      	movs	r2, #12
 8001f20:	4393      	bics	r3, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2204      	movs	r2, #4
 8001f34:	4013      	ands	r3, r2
 8001f36:	d009      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f38:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3c:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	0019      	movs	r1, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2208      	movs	r2, #8
 8001f52:	4013      	ands	r3, r2
 8001f54:	d009      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f56:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	4a16      	ldr	r2, [pc, #88]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	0019      	movs	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f66:	430a      	orrs	r2, r1
 8001f68:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2280      	movs	r2, #128	; 0x80
 8001f70:	4013      	ands	r3, r2
 8001f72:	d009      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001f74:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f78:	4a0f      	ldr	r2, [pc, #60]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	0019      	movs	r1, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695a      	ldr	r2, [r3, #20]
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f84:	430a      	orrs	r2, r1
 8001f86:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b006      	add	sp, #24
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40007000 	.word	0x40007000
 8001f9c:	fffcffff 	.word	0xfffcffff
 8001fa0:	fff7ffff 	.word	0xfff7ffff
 8001fa4:	00001388 	.word	0x00001388
 8001fa8:	ffcfffff 	.word	0xffcfffff
 8001fac:	efffffff 	.word	0xefffffff
 8001fb0:	fffff3ff 	.word	0xfffff3ff
 8001fb4:	ffffcfff 	.word	0xffffcfff
 8001fb8:	fff3ffff 	.word	0xfff3ffff

08001fbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e032      	b.n	8002034 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2239      	movs	r2, #57	; 0x39
 8001fd2:	5c9b      	ldrb	r3, [r3, r2]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d107      	bne.n	8001fea <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2238      	movs	r2, #56	; 0x38
 8001fde:	2100      	movs	r1, #0
 8001fe0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f7fe fd95 	bl	8000b14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2239      	movs	r2, #57	; 0x39
 8001fee:	2102      	movs	r1, #2
 8001ff0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	0010      	movs	r0, r2
 8001ffe:	f000 f96f 	bl	80022e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	223e      	movs	r2, #62	; 0x3e
 8002006:	2101      	movs	r1, #1
 8002008:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	223a      	movs	r2, #58	; 0x3a
 800200e:	2101      	movs	r1, #1
 8002010:	5499      	strb	r1, [r3, r2]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	223b      	movs	r2, #59	; 0x3b
 8002016:	2101      	movs	r1, #1
 8002018:	5499      	strb	r1, [r3, r2]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	223c      	movs	r2, #60	; 0x3c
 800201e:	2101      	movs	r1, #1
 8002020:	5499      	strb	r1, [r3, r2]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	223d      	movs	r2, #61	; 0x3d
 8002026:	2101      	movs	r1, #1
 8002028:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2239      	movs	r2, #57	; 0x39
 800202e:	2101      	movs	r1, #1
 8002030:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	b002      	add	sp, #8
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d108      	bne.n	800205e <HAL_TIM_PWM_Start+0x22>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	223a      	movs	r2, #58	; 0x3a
 8002050:	5c9b      	ldrb	r3, [r3, r2]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	3b01      	subs	r3, #1
 8002056:	1e5a      	subs	r2, r3, #1
 8002058:	4193      	sbcs	r3, r2
 800205a:	b2db      	uxtb	r3, r3
 800205c:	e01f      	b.n	800209e <HAL_TIM_PWM_Start+0x62>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b04      	cmp	r3, #4
 8002062:	d108      	bne.n	8002076 <HAL_TIM_PWM_Start+0x3a>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	223b      	movs	r2, #59	; 0x3b
 8002068:	5c9b      	ldrb	r3, [r3, r2]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	3b01      	subs	r3, #1
 800206e:	1e5a      	subs	r2, r3, #1
 8002070:	4193      	sbcs	r3, r2
 8002072:	b2db      	uxtb	r3, r3
 8002074:	e013      	b.n	800209e <HAL_TIM_PWM_Start+0x62>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2b08      	cmp	r3, #8
 800207a:	d108      	bne.n	800208e <HAL_TIM_PWM_Start+0x52>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	223c      	movs	r2, #60	; 0x3c
 8002080:	5c9b      	ldrb	r3, [r3, r2]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	3b01      	subs	r3, #1
 8002086:	1e5a      	subs	r2, r3, #1
 8002088:	4193      	sbcs	r3, r2
 800208a:	b2db      	uxtb	r3, r3
 800208c:	e007      	b.n	800209e <HAL_TIM_PWM_Start+0x62>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	223d      	movs	r2, #61	; 0x3d
 8002092:	5c9b      	ldrb	r3, [r3, r2]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	3b01      	subs	r3, #1
 8002098:	1e5a      	subs	r2, r3, #1
 800209a:	4193      	sbcs	r3, r2
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e04d      	b.n	8002142 <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d104      	bne.n	80020b6 <HAL_TIM_PWM_Start+0x7a>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	223a      	movs	r2, #58	; 0x3a
 80020b0:	2102      	movs	r1, #2
 80020b2:	5499      	strb	r1, [r3, r2]
 80020b4:	e013      	b.n	80020de <HAL_TIM_PWM_Start+0xa2>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d104      	bne.n	80020c6 <HAL_TIM_PWM_Start+0x8a>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	223b      	movs	r2, #59	; 0x3b
 80020c0:	2102      	movs	r1, #2
 80020c2:	5499      	strb	r1, [r3, r2]
 80020c4:	e00b      	b.n	80020de <HAL_TIM_PWM_Start+0xa2>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d104      	bne.n	80020d6 <HAL_TIM_PWM_Start+0x9a>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	223c      	movs	r2, #60	; 0x3c
 80020d0:	2102      	movs	r1, #2
 80020d2:	5499      	strb	r1, [r3, r2]
 80020d4:	e003      	b.n	80020de <HAL_TIM_PWM_Start+0xa2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	223d      	movs	r2, #61	; 0x3d
 80020da:	2102      	movs	r1, #2
 80020dc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6839      	ldr	r1, [r7, #0]
 80020e4:	2201      	movs	r2, #1
 80020e6:	0018      	movs	r0, r3
 80020e8:	f000 fa52 	bl	8002590 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	05db      	lsls	r3, r3, #23
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d009      	beq.n	800210c <HAL_TIM_PWM_Start+0xd0>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a13      	ldr	r2, [pc, #76]	; (800214c <HAL_TIM_PWM_Start+0x110>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d004      	beq.n	800210c <HAL_TIM_PWM_Start+0xd0>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a12      	ldr	r2, [pc, #72]	; (8002150 <HAL_TIM_PWM_Start+0x114>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d111      	bne.n	8002130 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2207      	movs	r2, #7
 8002114:	4013      	ands	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b06      	cmp	r3, #6
 800211c:	d010      	beq.n	8002140 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2101      	movs	r1, #1
 800212a:	430a      	orrs	r2, r1
 800212c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800212e:	e007      	b.n	8002140 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2101      	movs	r1, #1
 800213c:	430a      	orrs	r2, r1
 800213e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	0018      	movs	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	b004      	add	sp, #16
 8002148:	bd80      	pop	{r7, pc}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	40010800 	.word	0x40010800
 8002150:	40011400 	.word	0x40011400

08002154 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002160:	2317      	movs	r3, #23
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2238      	movs	r2, #56	; 0x38
 800216c:	5c9b      	ldrb	r3, [r3, r2]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002172:	2302      	movs	r3, #2
 8002174:	e0ad      	b.n	80022d2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2238      	movs	r2, #56	; 0x38
 800217a:	2101      	movs	r1, #1
 800217c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b0c      	cmp	r3, #12
 8002182:	d100      	bne.n	8002186 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002184:	e076      	b.n	8002274 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b0c      	cmp	r3, #12
 800218a:	d900      	bls.n	800218e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800218c:	e095      	b.n	80022ba <HAL_TIM_PWM_ConfigChannel+0x166>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b08      	cmp	r3, #8
 8002192:	d04e      	beq.n	8002232 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b08      	cmp	r3, #8
 8002198:	d900      	bls.n	800219c <HAL_TIM_PWM_ConfigChannel+0x48>
 800219a:	e08e      	b.n	80022ba <HAL_TIM_PWM_ConfigChannel+0x166>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_TIM_PWM_ConfigChannel+0x56>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d021      	beq.n	80021ec <HAL_TIM_PWM_ConfigChannel+0x98>
 80021a8:	e087      	b.n	80022ba <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	0011      	movs	r1, r2
 80021b2:	0018      	movs	r0, r3
 80021b4:	f000 f8e8 	bl	8002388 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2108      	movs	r1, #8
 80021c4:	430a      	orrs	r2, r1
 80021c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2104      	movs	r1, #4
 80021d4:	438a      	bics	r2, r1
 80021d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6999      	ldr	r1, [r3, #24]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	619a      	str	r2, [r3, #24]
      break;
 80021ea:	e06b      	b.n	80022c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	0011      	movs	r1, r2
 80021f4:	0018      	movs	r0, r3
 80021f6:	f000 f903 	bl	8002400 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699a      	ldr	r2, [r3, #24]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2180      	movs	r1, #128	; 0x80
 8002206:	0109      	lsls	r1, r1, #4
 8002208:	430a      	orrs	r2, r1
 800220a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699a      	ldr	r2, [r3, #24]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4931      	ldr	r1, [pc, #196]	; (80022dc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002218:	400a      	ands	r2, r1
 800221a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6999      	ldr	r1, [r3, #24]
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	021a      	lsls	r2, r3, #8
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	619a      	str	r2, [r3, #24]
      break;
 8002230:	e048      	b.n	80022c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	0011      	movs	r1, r2
 800223a:	0018      	movs	r0, r3
 800223c:	f000 f922 	bl	8002484 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2108      	movs	r1, #8
 800224c:	430a      	orrs	r2, r1
 800224e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	69da      	ldr	r2, [r3, #28]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2104      	movs	r1, #4
 800225c:	438a      	bics	r2, r1
 800225e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	69d9      	ldr	r1, [r3, #28]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	61da      	str	r2, [r3, #28]
      break;
 8002272:	e027      	b.n	80022c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	0011      	movs	r1, r2
 800227c:	0018      	movs	r0, r3
 800227e:	f000 f941 	bl	8002504 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	69da      	ldr	r2, [r3, #28]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2180      	movs	r1, #128	; 0x80
 800228e:	0109      	lsls	r1, r1, #4
 8002290:	430a      	orrs	r2, r1
 8002292:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	69da      	ldr	r2, [r3, #28]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	490f      	ldr	r1, [pc, #60]	; (80022dc <HAL_TIM_PWM_ConfigChannel+0x188>)
 80022a0:	400a      	ands	r2, r1
 80022a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	69d9      	ldr	r1, [r3, #28]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	021a      	lsls	r2, r3, #8
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	61da      	str	r2, [r3, #28]
      break;
 80022b8:	e004      	b.n	80022c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80022ba:	2317      	movs	r3, #23
 80022bc:	18fb      	adds	r3, r7, r3
 80022be:	2201      	movs	r2, #1
 80022c0:	701a      	strb	r2, [r3, #0]
      break;
 80022c2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2238      	movs	r2, #56	; 0x38
 80022c8:	2100      	movs	r1, #0
 80022ca:	5499      	strb	r1, [r3, r2]

  return status;
 80022cc:	2317      	movs	r3, #23
 80022ce:	18fb      	adds	r3, r7, r3
 80022d0:	781b      	ldrb	r3, [r3, #0]
}
 80022d2:	0018      	movs	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b006      	add	sp, #24
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	fffffbff 	.word	0xfffffbff

080022e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	05db      	lsls	r3, r3, #23
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d007      	beq.n	800230a <TIM_Base_SetConfig+0x2a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a1f      	ldr	r2, [pc, #124]	; (800237c <TIM_Base_SetConfig+0x9c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d003      	beq.n	800230a <TIM_Base_SetConfig+0x2a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a1e      	ldr	r2, [pc, #120]	; (8002380 <TIM_Base_SetConfig+0xa0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d108      	bne.n	800231c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2270      	movs	r2, #112	; 0x70
 800230e:	4393      	bics	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	05db      	lsls	r3, r3, #23
 8002322:	429a      	cmp	r2, r3
 8002324:	d007      	beq.n	8002336 <TIM_Base_SetConfig+0x56>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a14      	ldr	r2, [pc, #80]	; (800237c <TIM_Base_SetConfig+0x9c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d003      	beq.n	8002336 <TIM_Base_SetConfig+0x56>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a13      	ldr	r2, [pc, #76]	; (8002380 <TIM_Base_SetConfig+0xa0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d108      	bne.n	8002348 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4a12      	ldr	r2, [pc, #72]	; (8002384 <TIM_Base_SetConfig+0xa4>)
 800233a:	4013      	ands	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4313      	orrs	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2280      	movs	r2, #128	; 0x80
 800234c:	4393      	bics	r3, r2
 800234e:	001a      	movs	r2, r3
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	615a      	str	r2, [r3, #20]
}
 8002374:	46c0      	nop			; (mov r8, r8)
 8002376:	46bd      	mov	sp, r7
 8002378:	b004      	add	sp, #16
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40010800 	.word	0x40010800
 8002380:	40011400 	.word	0x40011400
 8002384:	fffffcff 	.word	0xfffffcff

08002388 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	2201      	movs	r2, #1
 8002398:	4393      	bics	r3, r2
 800239a:	001a      	movs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2270      	movs	r2, #112	; 0x70
 80023b6:	4393      	bics	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2203      	movs	r2, #3
 80023be:	4393      	bics	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2202      	movs	r2, #2
 80023d0:	4393      	bics	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	4313      	orrs	r3, r2
 80023dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	621a      	str	r2, [r3, #32]
}
 80023f8:	46c0      	nop			; (mov r8, r8)
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b006      	add	sp, #24
 80023fe:	bd80      	pop	{r7, pc}

08002400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	2210      	movs	r2, #16
 8002410:	4393      	bics	r3, r2
 8002412:	001a      	movs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4a13      	ldr	r2, [pc, #76]	; (800247c <TIM_OC2_SetConfig+0x7c>)
 800242e:	4013      	ands	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4a12      	ldr	r2, [pc, #72]	; (8002480 <TIM_OC2_SetConfig+0x80>)
 8002436:	4013      	ands	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2220      	movs	r2, #32
 800244a:	4393      	bics	r3, r2
 800244c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	4313      	orrs	r3, r2
 8002458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	621a      	str	r2, [r3, #32]
}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b006      	add	sp, #24
 800247a:	bd80      	pop	{r7, pc}
 800247c:	ffff8fff 	.word	0xffff8fff
 8002480:	fffffcff 	.word	0xfffffcff

08002484 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	4a1a      	ldr	r2, [pc, #104]	; (80024fc <TIM_OC3_SetConfig+0x78>)
 8002494:	401a      	ands	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2270      	movs	r2, #112	; 0x70
 80024b0:	4393      	bics	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2203      	movs	r2, #3
 80024b8:	4393      	bics	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	4a0d      	ldr	r2, [pc, #52]	; (8002500 <TIM_OC3_SetConfig+0x7c>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	021b      	lsls	r3, r3, #8
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	621a      	str	r2, [r3, #32]
}
 80024f4:	46c0      	nop			; (mov r8, r8)
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b006      	add	sp, #24
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	fffffeff 	.word	0xfffffeff
 8002500:	fffffdff 	.word	0xfffffdff

08002504 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	4a1b      	ldr	r2, [pc, #108]	; (8002580 <TIM_OC4_SetConfig+0x7c>)
 8002514:	401a      	ands	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4a15      	ldr	r2, [pc, #84]	; (8002584 <TIM_OC4_SetConfig+0x80>)
 8002530:	4013      	ands	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4a14      	ldr	r2, [pc, #80]	; (8002588 <TIM_OC4_SetConfig+0x84>)
 8002538:	4013      	ands	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	021b      	lsls	r3, r3, #8
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	4a10      	ldr	r2, [pc, #64]	; (800258c <TIM_OC4_SetConfig+0x88>)
 800254c:	4013      	ands	r3, r2
 800254e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	031b      	lsls	r3, r3, #12
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	4313      	orrs	r3, r2
 800255a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	621a      	str	r2, [r3, #32]
}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	46bd      	mov	sp, r7
 800257a:	b006      	add	sp, #24
 800257c:	bd80      	pop	{r7, pc}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	ffffefff 	.word	0xffffefff
 8002584:	ffff8fff 	.word	0xffff8fff
 8002588:	fffffcff 	.word	0xfffffcff
 800258c:	ffffdfff 	.word	0xffffdfff

08002590 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	221f      	movs	r2, #31
 80025a0:	4013      	ands	r3, r2
 80025a2:	2201      	movs	r2, #1
 80025a4:	409a      	lsls	r2, r3
 80025a6:	0013      	movs	r3, r2
 80025a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	43d2      	mvns	r2, r2
 80025b2:	401a      	ands	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a1a      	ldr	r2, [r3, #32]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	211f      	movs	r1, #31
 80025c0:	400b      	ands	r3, r1
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4099      	lsls	r1, r3
 80025c6:	000b      	movs	r3, r1
 80025c8:	431a      	orrs	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	621a      	str	r2, [r3, #32]
}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b006      	add	sp, #24
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2238      	movs	r2, #56	; 0x38
 80025e6:	5c9b      	ldrb	r3, [r3, r2]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d101      	bne.n	80025f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e042      	b.n	8002676 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2238      	movs	r2, #56	; 0x38
 80025f4:	2101      	movs	r1, #1
 80025f6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2239      	movs	r2, #57	; 0x39
 80025fc:	2102      	movs	r1, #2
 80025fe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2270      	movs	r2, #112	; 0x70
 8002614:	4393      	bics	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	2380      	movs	r3, #128	; 0x80
 8002630:	05db      	lsls	r3, r3, #23
 8002632:	429a      	cmp	r2, r3
 8002634:	d009      	beq.n	800264a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a11      	ldr	r2, [pc, #68]	; (8002680 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d004      	beq.n	800264a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a0f      	ldr	r2, [pc, #60]	; (8002684 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d10c      	bne.n	8002664 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2280      	movs	r2, #128	; 0x80
 800264e:	4393      	bics	r3, r2
 8002650:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	4313      	orrs	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2239      	movs	r2, #57	; 0x39
 8002668:	2101      	movs	r1, #1
 800266a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2238      	movs	r2, #56	; 0x38
 8002670:	2100      	movs	r1, #0
 8002672:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	0018      	movs	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	b004      	add	sp, #16
 800267c:	bd80      	pop	{r7, pc}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	40010800 	.word	0x40010800
 8002684:	40011400 	.word	0x40011400

08002688 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e044      	b.n	8002724 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d107      	bne.n	80026b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2278      	movs	r2, #120	; 0x78
 80026a6:	2100      	movs	r1, #0
 80026a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7fe f9ed 	bl	8000a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2224      	movs	r2, #36	; 0x24
 80026b6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2101      	movs	r1, #1
 80026c4:	438a      	bics	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	0018      	movs	r0, r3
 80026cc:	f000 f8d0 	bl	8002870 <UART_SetConfig>
 80026d0:	0003      	movs	r3, r0
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e024      	b.n	8002724 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	0018      	movs	r0, r3
 80026e6:	f000 fb0d 	bl	8002d04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	490d      	ldr	r1, [pc, #52]	; (800272c <HAL_UART_Init+0xa4>)
 80026f6:	400a      	ands	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	212a      	movs	r1, #42	; 0x2a
 8002706:	438a      	bics	r2, r1
 8002708:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2101      	movs	r1, #1
 8002716:	430a      	orrs	r2, r1
 8002718:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	0018      	movs	r0, r3
 800271e:	f000 fba5 	bl	8002e6c <UART_CheckIdleState>
 8002722:	0003      	movs	r3, r0
}
 8002724:	0018      	movs	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	b002      	add	sp, #8
 800272a:	bd80      	pop	{r7, pc}
 800272c:	ffffb7ff 	.word	0xffffb7ff

08002730 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08a      	sub	sp, #40	; 0x28
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	1dbb      	adds	r3, r7, #6
 800273e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002744:	2b20      	cmp	r3, #32
 8002746:	d000      	beq.n	800274a <HAL_UART_Transmit+0x1a>
 8002748:	e08c      	b.n	8002864 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_UART_Transmit+0x28>
 8002750:	1dbb      	adds	r3, r7, #6
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e084      	b.n	8002866 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	015b      	lsls	r3, r3, #5
 8002764:	429a      	cmp	r2, r3
 8002766:	d109      	bne.n	800277c <HAL_UART_Transmit+0x4c>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d105      	bne.n	800277c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2201      	movs	r2, #1
 8002774:	4013      	ands	r3, r2
 8002776:	d001      	beq.n	800277c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e074      	b.n	8002866 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2284      	movs	r2, #132	; 0x84
 8002780:	2100      	movs	r1, #0
 8002782:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2221      	movs	r2, #33	; 0x21
 8002788:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800278a:	f7fe fae5 	bl	8000d58 <HAL_GetTick>
 800278e:	0003      	movs	r3, r0
 8002790:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1dba      	adds	r2, r7, #6
 8002796:	2150      	movs	r1, #80	; 0x50
 8002798:	8812      	ldrh	r2, [r2, #0]
 800279a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1dba      	adds	r2, r7, #6
 80027a0:	2152      	movs	r1, #82	; 0x52
 80027a2:	8812      	ldrh	r2, [r2, #0]
 80027a4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	2380      	movs	r3, #128	; 0x80
 80027ac:	015b      	lsls	r3, r3, #5
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d108      	bne.n	80027c4 <HAL_UART_Transmit+0x94>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d104      	bne.n	80027c4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	e003      	b.n	80027cc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027cc:	e02f      	b.n	800282e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	0013      	movs	r3, r2
 80027d8:	2200      	movs	r2, #0
 80027da:	2180      	movs	r1, #128	; 0x80
 80027dc:	f000 fbee 	bl	8002fbc <UART_WaitOnFlagUntilTimeout>
 80027e0:	1e03      	subs	r3, r0, #0
 80027e2:	d004      	beq.n	80027ee <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2220      	movs	r2, #32
 80027e8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e03b      	b.n	8002866 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10b      	bne.n	800280c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	001a      	movs	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	05d2      	lsls	r2, r2, #23
 8002800:	0dd2      	lsrs	r2, r2, #23
 8002802:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	3302      	adds	r3, #2
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	e007      	b.n	800281c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	781a      	ldrb	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3301      	adds	r3, #1
 800281a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2252      	movs	r2, #82	; 0x52
 8002820:	5a9b      	ldrh	r3, [r3, r2]
 8002822:	b29b      	uxth	r3, r3
 8002824:	3b01      	subs	r3, #1
 8002826:	b299      	uxth	r1, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2252      	movs	r2, #82	; 0x52
 800282c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2252      	movs	r2, #82	; 0x52
 8002832:	5a9b      	ldrh	r3, [r3, r2]
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1c9      	bne.n	80027ce <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	0013      	movs	r3, r2
 8002844:	2200      	movs	r2, #0
 8002846:	2140      	movs	r1, #64	; 0x40
 8002848:	f000 fbb8 	bl	8002fbc <UART_WaitOnFlagUntilTimeout>
 800284c:	1e03      	subs	r3, r0, #0
 800284e:	d004      	beq.n	800285a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e005      	b.n	8002866 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2220      	movs	r2, #32
 800285e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e000      	b.n	8002866 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002864:	2302      	movs	r3, #2
  }
}
 8002866:	0018      	movs	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	b008      	add	sp, #32
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002870:	b5b0      	push	{r4, r5, r7, lr}
 8002872:	b08e      	sub	sp, #56	; 0x38
 8002874:	af00      	add	r7, sp, #0
 8002876:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002878:	231a      	movs	r3, #26
 800287a:	2218      	movs	r2, #24
 800287c:	189b      	adds	r3, r3, r2
 800287e:	19db      	adds	r3, r3, r7
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	431a      	orrs	r2, r3
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	431a      	orrs	r2, r3
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	4313      	orrs	r3, r2
 800289a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4ab4      	ldr	r2, [pc, #720]	; (8002b74 <UART_SetConfig+0x304>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	0019      	movs	r1, r3
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028ae:	430a      	orrs	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4aaf      	ldr	r2, [pc, #700]	; (8002b78 <UART_SetConfig+0x308>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4aa9      	ldr	r2, [pc, #676]	; (8002b7c <UART_SetConfig+0x30c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d004      	beq.n	80028e4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028e0:	4313      	orrs	r3, r2
 80028e2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	4aa5      	ldr	r2, [pc, #660]	; (8002b80 <UART_SetConfig+0x310>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	0019      	movs	r1, r3
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028f6:	430a      	orrs	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4aa1      	ldr	r2, [pc, #644]	; (8002b84 <UART_SetConfig+0x314>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d131      	bne.n	8002968 <UART_SetConfig+0xf8>
 8002904:	4ba0      	ldr	r3, [pc, #640]	; (8002b88 <UART_SetConfig+0x318>)
 8002906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002908:	220c      	movs	r2, #12
 800290a:	4013      	ands	r3, r2
 800290c:	2b0c      	cmp	r3, #12
 800290e:	d01d      	beq.n	800294c <UART_SetConfig+0xdc>
 8002910:	d823      	bhi.n	800295a <UART_SetConfig+0xea>
 8002912:	2b08      	cmp	r3, #8
 8002914:	d00c      	beq.n	8002930 <UART_SetConfig+0xc0>
 8002916:	d820      	bhi.n	800295a <UART_SetConfig+0xea>
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <UART_SetConfig+0xb2>
 800291c:	2b04      	cmp	r3, #4
 800291e:	d00e      	beq.n	800293e <UART_SetConfig+0xce>
 8002920:	e01b      	b.n	800295a <UART_SetConfig+0xea>
 8002922:	231b      	movs	r3, #27
 8002924:	2218      	movs	r2, #24
 8002926:	189b      	adds	r3, r3, r2
 8002928:	19db      	adds	r3, r3, r7
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	e065      	b.n	80029fc <UART_SetConfig+0x18c>
 8002930:	231b      	movs	r3, #27
 8002932:	2218      	movs	r2, #24
 8002934:	189b      	adds	r3, r3, r2
 8002936:	19db      	adds	r3, r3, r7
 8002938:	2202      	movs	r2, #2
 800293a:	701a      	strb	r2, [r3, #0]
 800293c:	e05e      	b.n	80029fc <UART_SetConfig+0x18c>
 800293e:	231b      	movs	r3, #27
 8002940:	2218      	movs	r2, #24
 8002942:	189b      	adds	r3, r3, r2
 8002944:	19db      	adds	r3, r3, r7
 8002946:	2204      	movs	r2, #4
 8002948:	701a      	strb	r2, [r3, #0]
 800294a:	e057      	b.n	80029fc <UART_SetConfig+0x18c>
 800294c:	231b      	movs	r3, #27
 800294e:	2218      	movs	r2, #24
 8002950:	189b      	adds	r3, r3, r2
 8002952:	19db      	adds	r3, r3, r7
 8002954:	2208      	movs	r2, #8
 8002956:	701a      	strb	r2, [r3, #0]
 8002958:	e050      	b.n	80029fc <UART_SetConfig+0x18c>
 800295a:	231b      	movs	r3, #27
 800295c:	2218      	movs	r2, #24
 800295e:	189b      	adds	r3, r3, r2
 8002960:	19db      	adds	r3, r3, r7
 8002962:	2210      	movs	r2, #16
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	e049      	b.n	80029fc <UART_SetConfig+0x18c>
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a83      	ldr	r2, [pc, #524]	; (8002b7c <UART_SetConfig+0x30c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d13e      	bne.n	80029f0 <UART_SetConfig+0x180>
 8002972:	4b85      	ldr	r3, [pc, #532]	; (8002b88 <UART_SetConfig+0x318>)
 8002974:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002976:	23c0      	movs	r3, #192	; 0xc0
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	4013      	ands	r3, r2
 800297c:	22c0      	movs	r2, #192	; 0xc0
 800297e:	0112      	lsls	r2, r2, #4
 8002980:	4293      	cmp	r3, r2
 8002982:	d027      	beq.n	80029d4 <UART_SetConfig+0x164>
 8002984:	22c0      	movs	r2, #192	; 0xc0
 8002986:	0112      	lsls	r2, r2, #4
 8002988:	4293      	cmp	r3, r2
 800298a:	d82a      	bhi.n	80029e2 <UART_SetConfig+0x172>
 800298c:	2280      	movs	r2, #128	; 0x80
 800298e:	0112      	lsls	r2, r2, #4
 8002990:	4293      	cmp	r3, r2
 8002992:	d011      	beq.n	80029b8 <UART_SetConfig+0x148>
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	0112      	lsls	r2, r2, #4
 8002998:	4293      	cmp	r3, r2
 800299a:	d822      	bhi.n	80029e2 <UART_SetConfig+0x172>
 800299c:	2b00      	cmp	r3, #0
 800299e:	d004      	beq.n	80029aa <UART_SetConfig+0x13a>
 80029a0:	2280      	movs	r2, #128	; 0x80
 80029a2:	00d2      	lsls	r2, r2, #3
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d00e      	beq.n	80029c6 <UART_SetConfig+0x156>
 80029a8:	e01b      	b.n	80029e2 <UART_SetConfig+0x172>
 80029aa:	231b      	movs	r3, #27
 80029ac:	2218      	movs	r2, #24
 80029ae:	189b      	adds	r3, r3, r2
 80029b0:	19db      	adds	r3, r3, r7
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	e021      	b.n	80029fc <UART_SetConfig+0x18c>
 80029b8:	231b      	movs	r3, #27
 80029ba:	2218      	movs	r2, #24
 80029bc:	189b      	adds	r3, r3, r2
 80029be:	19db      	adds	r3, r3, r7
 80029c0:	2202      	movs	r2, #2
 80029c2:	701a      	strb	r2, [r3, #0]
 80029c4:	e01a      	b.n	80029fc <UART_SetConfig+0x18c>
 80029c6:	231b      	movs	r3, #27
 80029c8:	2218      	movs	r2, #24
 80029ca:	189b      	adds	r3, r3, r2
 80029cc:	19db      	adds	r3, r3, r7
 80029ce:	2204      	movs	r2, #4
 80029d0:	701a      	strb	r2, [r3, #0]
 80029d2:	e013      	b.n	80029fc <UART_SetConfig+0x18c>
 80029d4:	231b      	movs	r3, #27
 80029d6:	2218      	movs	r2, #24
 80029d8:	189b      	adds	r3, r3, r2
 80029da:	19db      	adds	r3, r3, r7
 80029dc:	2208      	movs	r2, #8
 80029de:	701a      	strb	r2, [r3, #0]
 80029e0:	e00c      	b.n	80029fc <UART_SetConfig+0x18c>
 80029e2:	231b      	movs	r3, #27
 80029e4:	2218      	movs	r2, #24
 80029e6:	189b      	adds	r3, r3, r2
 80029e8:	19db      	adds	r3, r3, r7
 80029ea:	2210      	movs	r2, #16
 80029ec:	701a      	strb	r2, [r3, #0]
 80029ee:	e005      	b.n	80029fc <UART_SetConfig+0x18c>
 80029f0:	231b      	movs	r3, #27
 80029f2:	2218      	movs	r2, #24
 80029f4:	189b      	adds	r3, r3, r2
 80029f6:	19db      	adds	r3, r3, r7
 80029f8:	2210      	movs	r2, #16
 80029fa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a5e      	ldr	r2, [pc, #376]	; (8002b7c <UART_SetConfig+0x30c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d000      	beq.n	8002a08 <UART_SetConfig+0x198>
 8002a06:	e084      	b.n	8002b12 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a08:	231b      	movs	r3, #27
 8002a0a:	2218      	movs	r2, #24
 8002a0c:	189b      	adds	r3, r3, r2
 8002a0e:	19db      	adds	r3, r3, r7
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d01d      	beq.n	8002a52 <UART_SetConfig+0x1e2>
 8002a16:	dc20      	bgt.n	8002a5a <UART_SetConfig+0x1ea>
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d015      	beq.n	8002a48 <UART_SetConfig+0x1d8>
 8002a1c:	dc1d      	bgt.n	8002a5a <UART_SetConfig+0x1ea>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <UART_SetConfig+0x1b8>
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d005      	beq.n	8002a32 <UART_SetConfig+0x1c2>
 8002a26:	e018      	b.n	8002a5a <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a28:	f7ff f970 	bl	8001d0c <HAL_RCC_GetPCLK1Freq>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a30:	e01c      	b.n	8002a6c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a32:	4b55      	ldr	r3, [pc, #340]	; (8002b88 <UART_SetConfig+0x318>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2210      	movs	r2, #16
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d002      	beq.n	8002a42 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002a3c:	4b53      	ldr	r3, [pc, #332]	; (8002b8c <UART_SetConfig+0x31c>)
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002a40:	e014      	b.n	8002a6c <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002a42:	4b53      	ldr	r3, [pc, #332]	; (8002b90 <UART_SetConfig+0x320>)
 8002a44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a46:	e011      	b.n	8002a6c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a48:	f7ff f8b0 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a50:	e00c      	b.n	8002a6c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a52:	2380      	movs	r3, #128	; 0x80
 8002a54:	021b      	lsls	r3, r3, #8
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a58:	e008      	b.n	8002a6c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002a5e:	231a      	movs	r3, #26
 8002a60:	2218      	movs	r2, #24
 8002a62:	189b      	adds	r3, r3, r2
 8002a64:	19db      	adds	r3, r3, r7
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
        break;
 8002a6a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d100      	bne.n	8002a74 <UART_SetConfig+0x204>
 8002a72:	e12f      	b.n	8002cd4 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	0013      	movs	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	189b      	adds	r3, r3, r2
 8002a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d305      	bcc.n	8002a90 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d906      	bls.n	8002a9e <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002a90:	231a      	movs	r3, #26
 8002a92:	2218      	movs	r2, #24
 8002a94:	189b      	adds	r3, r3, r2
 8002a96:	19db      	adds	r3, r3, r7
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
 8002a9c:	e11a      	b.n	8002cd4 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	6939      	ldr	r1, [r7, #16]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	000b      	movs	r3, r1
 8002aac:	0e1b      	lsrs	r3, r3, #24
 8002aae:	0010      	movs	r0, r2
 8002ab0:	0205      	lsls	r5, r0, #8
 8002ab2:	431d      	orrs	r5, r3
 8002ab4:	000b      	movs	r3, r1
 8002ab6:	021c      	lsls	r4, r3, #8
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	085b      	lsrs	r3, r3, #1
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68b8      	ldr	r0, [r7, #8]
 8002ac6:	68f9      	ldr	r1, [r7, #12]
 8002ac8:	1900      	adds	r0, r0, r4
 8002aca:	4169      	adcs	r1, r5
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	603b      	str	r3, [r7, #0]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f7fd fba1 	bl	8000220 <__aeabi_uldivmod>
 8002ade:	0002      	movs	r2, r0
 8002ae0:	000b      	movs	r3, r1
 8002ae2:	0013      	movs	r3, r2
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ae8:	23c0      	movs	r3, #192	; 0xc0
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d309      	bcc.n	8002b04 <UART_SetConfig+0x294>
 8002af0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	035b      	lsls	r3, r3, #13
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d204      	bcs.n	8002b04 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	e0e7      	b.n	8002cd4 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8002b04:	231a      	movs	r3, #26
 8002b06:	2218      	movs	r2, #24
 8002b08:	189b      	adds	r3, r3, r2
 8002b0a:	19db      	adds	r3, r3, r7
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]
 8002b10:	e0e0      	b.n	8002cd4 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	021b      	lsls	r3, r3, #8
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d000      	beq.n	8002b20 <UART_SetConfig+0x2b0>
 8002b1e:	e082      	b.n	8002c26 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8002b20:	231b      	movs	r3, #27
 8002b22:	2218      	movs	r2, #24
 8002b24:	189b      	adds	r3, r3, r2
 8002b26:	19db      	adds	r3, r3, r7
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d834      	bhi.n	8002b98 <UART_SetConfig+0x328>
 8002b2e:	009a      	lsls	r2, r3, #2
 8002b30:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <UART_SetConfig+0x324>)
 8002b32:	18d3      	adds	r3, r2, r3
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b38:	f7ff f8e8 	bl	8001d0c <HAL_RCC_GetPCLK1Freq>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b40:	e033      	b.n	8002baa <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b42:	f7ff f8f9 	bl	8001d38 <HAL_RCC_GetPCLK2Freq>
 8002b46:	0003      	movs	r3, r0
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b4a:	e02e      	b.n	8002baa <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <UART_SetConfig+0x318>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2210      	movs	r2, #16
 8002b52:	4013      	ands	r3, r2
 8002b54:	d002      	beq.n	8002b5c <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <UART_SetConfig+0x31c>)
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002b5a:	e026      	b.n	8002baa <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <UART_SetConfig+0x320>)
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b60:	e023      	b.n	8002baa <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b62:	f7ff f823 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 8002b66:	0003      	movs	r3, r0
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b6a:	e01e      	b.n	8002baa <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b72:	e01a      	b.n	8002baa <UART_SetConfig+0x33a>
 8002b74:	efff69f3 	.word	0xefff69f3
 8002b78:	ffffcfff 	.word	0xffffcfff
 8002b7c:	40004800 	.word	0x40004800
 8002b80:	fffff4ff 	.word	0xfffff4ff
 8002b84:	40004400 	.word	0x40004400
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	003d0900 	.word	0x003d0900
 8002b90:	00f42400 	.word	0x00f42400
 8002b94:	08003250 	.word	0x08003250
      default:
        pclk = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002b9c:	231a      	movs	r3, #26
 8002b9e:	2218      	movs	r2, #24
 8002ba0:	189b      	adds	r3, r3, r2
 8002ba2:	19db      	adds	r3, r3, r7
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	701a      	strb	r2, [r3, #0]
        break;
 8002ba8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d100      	bne.n	8002bb2 <UART_SetConfig+0x342>
 8002bb0:	e090      	b.n	8002cd4 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	005a      	lsls	r2, r3, #1
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	085b      	lsrs	r3, r3, #1
 8002bbc:	18d2      	adds	r2, r2, r3
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	0019      	movs	r1, r3
 8002bc4:	0010      	movs	r0, r2
 8002bc6:	f7fd fa9f 	bl	8000108 <__udivsi3>
 8002bca:	0003      	movs	r3, r0
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd0:	2b0f      	cmp	r3, #15
 8002bd2:	d921      	bls.n	8002c18 <UART_SetConfig+0x3a8>
 8002bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	025b      	lsls	r3, r3, #9
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d21c      	bcs.n	8002c18 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	200e      	movs	r0, #14
 8002be4:	2418      	movs	r4, #24
 8002be6:	1903      	adds	r3, r0, r4
 8002be8:	19db      	adds	r3, r3, r7
 8002bea:	210f      	movs	r1, #15
 8002bec:	438a      	bics	r2, r1
 8002bee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf2:	085b      	lsrs	r3, r3, #1
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	b299      	uxth	r1, r3
 8002bfc:	1903      	adds	r3, r0, r4
 8002bfe:	19db      	adds	r3, r3, r7
 8002c00:	1902      	adds	r2, r0, r4
 8002c02:	19d2      	adds	r2, r2, r7
 8002c04:	8812      	ldrh	r2, [r2, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	1902      	adds	r2, r0, r4
 8002c10:	19d2      	adds	r2, r2, r7
 8002c12:	8812      	ldrh	r2, [r2, #0]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	e05d      	b.n	8002cd4 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002c18:	231a      	movs	r3, #26
 8002c1a:	2218      	movs	r2, #24
 8002c1c:	189b      	adds	r3, r3, r2
 8002c1e:	19db      	adds	r3, r3, r7
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]
 8002c24:	e056      	b.n	8002cd4 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c26:	231b      	movs	r3, #27
 8002c28:	2218      	movs	r2, #24
 8002c2a:	189b      	adds	r3, r3, r2
 8002c2c:	19db      	adds	r3, r3, r7
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d822      	bhi.n	8002c7a <UART_SetConfig+0x40a>
 8002c34:	009a      	lsls	r2, r3, #2
 8002c36:	4b2f      	ldr	r3, [pc, #188]	; (8002cf4 <UART_SetConfig+0x484>)
 8002c38:	18d3      	adds	r3, r2, r3
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c3e:	f7ff f865 	bl	8001d0c <HAL_RCC_GetPCLK1Freq>
 8002c42:	0003      	movs	r3, r0
 8002c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c46:	e021      	b.n	8002c8c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c48:	f7ff f876 	bl	8001d38 <HAL_RCC_GetPCLK2Freq>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c50:	e01c      	b.n	8002c8c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c52:	4b29      	ldr	r3, [pc, #164]	; (8002cf8 <UART_SetConfig+0x488>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2210      	movs	r2, #16
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d002      	beq.n	8002c62 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c5c:	4b27      	ldr	r3, [pc, #156]	; (8002cfc <UART_SetConfig+0x48c>)
 8002c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c60:	e014      	b.n	8002c8c <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8002c62:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <UART_SetConfig+0x490>)
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c66:	e011      	b.n	8002c8c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c68:	f7fe ffa0 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c70:	e00c      	b.n	8002c8c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c78:	e008      	b.n	8002c8c <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c7e:	231a      	movs	r3, #26
 8002c80:	2218      	movs	r2, #24
 8002c82:	189b      	adds	r3, r3, r2
 8002c84:	19db      	adds	r3, r3, r7
 8002c86:	2201      	movs	r2, #1
 8002c88:	701a      	strb	r2, [r3, #0]
        break;
 8002c8a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d020      	beq.n	8002cd4 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	085a      	lsrs	r2, r3, #1
 8002c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9a:	18d2      	adds	r2, r2, r3
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	0019      	movs	r1, r3
 8002ca2:	0010      	movs	r0, r2
 8002ca4:	f7fd fa30 	bl	8000108 <__udivsi3>
 8002ca8:	0003      	movs	r3, r0
 8002caa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cae:	2b0f      	cmp	r3, #15
 8002cb0:	d90a      	bls.n	8002cc8 <UART_SetConfig+0x458>
 8002cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	025b      	lsls	r3, r3, #9
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d205      	bcs.n	8002cc8 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	e005      	b.n	8002cd4 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002cc8:	231a      	movs	r3, #26
 8002cca:	2218      	movs	r2, #24
 8002ccc:	189b      	adds	r3, r3, r2
 8002cce:	19db      	adds	r3, r3, r7
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002ce0:	231a      	movs	r3, #26
 8002ce2:	2218      	movs	r2, #24
 8002ce4:	189b      	adds	r3, r3, r2
 8002ce6:	19db      	adds	r3, r3, r7
 8002ce8:	781b      	ldrb	r3, [r3, #0]
}
 8002cea:	0018      	movs	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b00e      	add	sp, #56	; 0x38
 8002cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	08003274 	.word	0x08003274
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	003d0900 	.word	0x003d0900
 8002d00:	00f42400 	.word	0x00f42400

08002d04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	2201      	movs	r2, #1
 8002d12:	4013      	ands	r3, r2
 8002d14:	d00b      	beq.n	8002d2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4a4a      	ldr	r2, [pc, #296]	; (8002e48 <UART_AdvFeatureConfig+0x144>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	0019      	movs	r1, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	2202      	movs	r2, #2
 8002d34:	4013      	ands	r3, r2
 8002d36:	d00b      	beq.n	8002d50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4a43      	ldr	r2, [pc, #268]	; (8002e4c <UART_AdvFeatureConfig+0x148>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	0019      	movs	r1, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	2204      	movs	r2, #4
 8002d56:	4013      	ands	r3, r2
 8002d58:	d00b      	beq.n	8002d72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4a3b      	ldr	r2, [pc, #236]	; (8002e50 <UART_AdvFeatureConfig+0x14c>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	0019      	movs	r1, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	2208      	movs	r2, #8
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d00b      	beq.n	8002d94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4a34      	ldr	r2, [pc, #208]	; (8002e54 <UART_AdvFeatureConfig+0x150>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	0019      	movs	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	2210      	movs	r2, #16
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d00b      	beq.n	8002db6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	4a2c      	ldr	r2, [pc, #176]	; (8002e58 <UART_AdvFeatureConfig+0x154>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	2220      	movs	r2, #32
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d00b      	beq.n	8002dd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	4a25      	ldr	r2, [pc, #148]	; (8002e5c <UART_AdvFeatureConfig+0x158>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	0019      	movs	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	2240      	movs	r2, #64	; 0x40
 8002dde:	4013      	ands	r3, r2
 8002de0:	d01d      	beq.n	8002e1e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	4a1d      	ldr	r2, [pc, #116]	; (8002e60 <UART_AdvFeatureConfig+0x15c>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	0019      	movs	r1, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	035b      	lsls	r3, r3, #13
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d10b      	bne.n	8002e1e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4a15      	ldr	r2, [pc, #84]	; (8002e64 <UART_AdvFeatureConfig+0x160>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	0019      	movs	r1, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	2280      	movs	r2, #128	; 0x80
 8002e24:	4013      	ands	r3, r2
 8002e26:	d00b      	beq.n	8002e40 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4a0e      	ldr	r2, [pc, #56]	; (8002e68 <UART_AdvFeatureConfig+0x164>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	605a      	str	r2, [r3, #4]
  }
}
 8002e40:	46c0      	nop			; (mov r8, r8)
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b002      	add	sp, #8
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	fffdffff 	.word	0xfffdffff
 8002e4c:	fffeffff 	.word	0xfffeffff
 8002e50:	fffbffff 	.word	0xfffbffff
 8002e54:	ffff7fff 	.word	0xffff7fff
 8002e58:	ffffefff 	.word	0xffffefff
 8002e5c:	ffffdfff 	.word	0xffffdfff
 8002e60:	ffefffff 	.word	0xffefffff
 8002e64:	ff9fffff 	.word	0xff9fffff
 8002e68:	fff7ffff 	.word	0xfff7ffff

08002e6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b092      	sub	sp, #72	; 0x48
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2284      	movs	r2, #132	; 0x84
 8002e78:	2100      	movs	r1, #0
 8002e7a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e7c:	f7fd ff6c 	bl	8000d58 <HAL_GetTick>
 8002e80:	0003      	movs	r3, r0
 8002e82:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2208      	movs	r2, #8
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d12c      	bne.n	8002eec <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e94:	2280      	movs	r2, #128	; 0x80
 8002e96:	0391      	lsls	r1, r2, #14
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	4a46      	ldr	r2, [pc, #280]	; (8002fb4 <UART_CheckIdleState+0x148>)
 8002e9c:	9200      	str	r2, [sp, #0]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f000 f88c 	bl	8002fbc <UART_WaitOnFlagUntilTimeout>
 8002ea4:	1e03      	subs	r3, r0, #0
 8002ea6:	d021      	beq.n	8002eec <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002eb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb8:	f383 8810 	msr	PRIMASK, r3
}
 8002ebc:	46c0      	nop			; (mov r8, r8)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2180      	movs	r1, #128	; 0x80
 8002eca:	438a      	bics	r2, r1
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed4:	f383 8810 	msr	PRIMASK, r3
}
 8002ed8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2220      	movs	r2, #32
 8002ede:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2278      	movs	r2, #120	; 0x78
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e05f      	b.n	8002fac <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d146      	bne.n	8002f88 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	03d1      	lsls	r1, r2, #15
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	4a2c      	ldr	r2, [pc, #176]	; (8002fb4 <UART_CheckIdleState+0x148>)
 8002f04:	9200      	str	r2, [sp, #0]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f000 f858 	bl	8002fbc <UART_WaitOnFlagUntilTimeout>
 8002f0c:	1e03      	subs	r3, r0, #0
 8002f0e:	d03b      	beq.n	8002f88 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f10:	f3ef 8310 	mrs	r3, PRIMASK
 8002f14:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f16:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f18:	637b      	str	r3, [r7, #52]	; 0x34
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f383 8810 	msr	PRIMASK, r3
}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4921      	ldr	r1, [pc, #132]	; (8002fb8 <UART_CheckIdleState+0x14c>)
 8002f32:	400a      	ands	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f383 8810 	msr	PRIMASK, r3
}
 8002f40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f42:	f3ef 8310 	mrs	r3, PRIMASK
 8002f46:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f48:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f383 8810 	msr	PRIMASK, r3
}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2101      	movs	r1, #1
 8002f64:	438a      	bics	r2, r1
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	f383 8810 	msr	PRIMASK, r3
}
 8002f72:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2280      	movs	r2, #128	; 0x80
 8002f78:	2120      	movs	r1, #32
 8002f7a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2278      	movs	r2, #120	; 0x78
 8002f80:	2100      	movs	r1, #0
 8002f82:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e011      	b.n	8002fac <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2280      	movs	r2, #128	; 0x80
 8002f92:	2120      	movs	r1, #32
 8002f94:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2278      	movs	r2, #120	; 0x78
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	0018      	movs	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b010      	add	sp, #64	; 0x40
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	01ffffff 	.word	0x01ffffff
 8002fb8:	fffffedf 	.word	0xfffffedf

08002fbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	1dfb      	adds	r3, r7, #7
 8002fca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fcc:	e04b      	b.n	8003066 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	d048      	beq.n	8003066 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd4:	f7fd fec0 	bl	8000d58 <HAL_GetTick>
 8002fd8:	0002      	movs	r2, r0
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d302      	bcc.n	8002fea <UART_WaitOnFlagUntilTimeout+0x2e>
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e04b      	b.n	8003086 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d035      	beq.n	8003066 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	2208      	movs	r2, #8
 8003002:	4013      	ands	r3, r2
 8003004:	2b08      	cmp	r3, #8
 8003006:	d111      	bne.n	800302c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2208      	movs	r2, #8
 800300e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	0018      	movs	r0, r3
 8003014:	f000 f83c 	bl	8003090 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2284      	movs	r2, #132	; 0x84
 800301c:	2108      	movs	r1, #8
 800301e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2278      	movs	r2, #120	; 0x78
 8003024:	2100      	movs	r1, #0
 8003026:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e02c      	b.n	8003086 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	69da      	ldr	r2, [r3, #28]
 8003032:	2380      	movs	r3, #128	; 0x80
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	401a      	ands	r2, r3
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	429a      	cmp	r2, r3
 800303e:	d112      	bne.n	8003066 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2280      	movs	r2, #128	; 0x80
 8003046:	0112      	lsls	r2, r2, #4
 8003048:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	0018      	movs	r0, r3
 800304e:	f000 f81f 	bl	8003090 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2284      	movs	r2, #132	; 0x84
 8003056:	2120      	movs	r1, #32
 8003058:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2278      	movs	r2, #120	; 0x78
 800305e:	2100      	movs	r1, #0
 8003060:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e00f      	b.n	8003086 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	4013      	ands	r3, r2
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	425a      	negs	r2, r3
 8003076:	4153      	adcs	r3, r2
 8003078:	b2db      	uxtb	r3, r3
 800307a:	001a      	movs	r2, r3
 800307c:	1dfb      	adds	r3, r7, #7
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d0a4      	beq.n	8002fce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b004      	add	sp, #16
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08e      	sub	sp, #56	; 0x38
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003098:	f3ef 8310 	mrs	r3, PRIMASK
 800309c:	617b      	str	r3, [r7, #20]
  return(result);
 800309e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030a0:	637b      	str	r3, [r7, #52]	; 0x34
 80030a2:	2301      	movs	r3, #1
 80030a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	f383 8810 	msr	PRIMASK, r3
}
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4926      	ldr	r1, [pc, #152]	; (8003154 <UART_EndRxTransfer+0xc4>)
 80030ba:	400a      	ands	r2, r1
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f383 8810 	msr	PRIMASK, r3
}
 80030c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ca:	f3ef 8310 	mrs	r3, PRIMASK
 80030ce:	623b      	str	r3, [r7, #32]
  return(result);
 80030d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d2:	633b      	str	r3, [r7, #48]	; 0x30
 80030d4:	2301      	movs	r3, #1
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	f383 8810 	msr	PRIMASK, r3
}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2101      	movs	r1, #1
 80030ec:	438a      	bics	r2, r1
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f6:	f383 8810 	msr	PRIMASK, r3
}
 80030fa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003100:	2b01      	cmp	r3, #1
 8003102:	d118      	bne.n	8003136 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003104:	f3ef 8310 	mrs	r3, PRIMASK
 8003108:	60bb      	str	r3, [r7, #8]
  return(result);
 800310a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800310c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800310e:	2301      	movs	r3, #1
 8003110:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f383 8810 	msr	PRIMASK, r3
}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2110      	movs	r1, #16
 8003126:	438a      	bics	r2, r1
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f383 8810 	msr	PRIMASK, r3
}
 8003134:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2280      	movs	r2, #128	; 0x80
 800313a:	2120      	movs	r1, #32
 800313c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	669a      	str	r2, [r3, #104]	; 0x68
}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	46bd      	mov	sp, r7
 800314e:	b00e      	add	sp, #56	; 0x38
 8003150:	bd80      	pop	{r7, pc}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	fffffedf 	.word	0xfffffedf

08003158 <memset>:
 8003158:	0003      	movs	r3, r0
 800315a:	1882      	adds	r2, r0, r2
 800315c:	4293      	cmp	r3, r2
 800315e:	d100      	bne.n	8003162 <memset+0xa>
 8003160:	4770      	bx	lr
 8003162:	7019      	strb	r1, [r3, #0]
 8003164:	3301      	adds	r3, #1
 8003166:	e7f9      	b.n	800315c <memset+0x4>

08003168 <__libc_init_array>:
 8003168:	b570      	push	{r4, r5, r6, lr}
 800316a:	2600      	movs	r6, #0
 800316c:	4c0c      	ldr	r4, [pc, #48]	; (80031a0 <__libc_init_array+0x38>)
 800316e:	4d0d      	ldr	r5, [pc, #52]	; (80031a4 <__libc_init_array+0x3c>)
 8003170:	1b64      	subs	r4, r4, r5
 8003172:	10a4      	asrs	r4, r4, #2
 8003174:	42a6      	cmp	r6, r4
 8003176:	d109      	bne.n	800318c <__libc_init_array+0x24>
 8003178:	2600      	movs	r6, #0
 800317a:	f000 f819 	bl	80031b0 <_init>
 800317e:	4c0a      	ldr	r4, [pc, #40]	; (80031a8 <__libc_init_array+0x40>)
 8003180:	4d0a      	ldr	r5, [pc, #40]	; (80031ac <__libc_init_array+0x44>)
 8003182:	1b64      	subs	r4, r4, r5
 8003184:	10a4      	asrs	r4, r4, #2
 8003186:	42a6      	cmp	r6, r4
 8003188:	d105      	bne.n	8003196 <__libc_init_array+0x2e>
 800318a:	bd70      	pop	{r4, r5, r6, pc}
 800318c:	00b3      	lsls	r3, r6, #2
 800318e:	58eb      	ldr	r3, [r5, r3]
 8003190:	4798      	blx	r3
 8003192:	3601      	adds	r6, #1
 8003194:	e7ee      	b.n	8003174 <__libc_init_array+0xc>
 8003196:	00b3      	lsls	r3, r6, #2
 8003198:	58eb      	ldr	r3, [r5, r3]
 800319a:	4798      	blx	r3
 800319c:	3601      	adds	r6, #1
 800319e:	e7f2      	b.n	8003186 <__libc_init_array+0x1e>
 80031a0:	080032a0 	.word	0x080032a0
 80031a4:	080032a0 	.word	0x080032a0
 80031a8:	080032a4 	.word	0x080032a4
 80031ac:	080032a0 	.word	0x080032a0

080031b0 <_init>:
 80031b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031b6:	bc08      	pop	{r3}
 80031b8:	469e      	mov	lr, r3
 80031ba:	4770      	bx	lr

080031bc <_fini>:
 80031bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031c2:	bc08      	pop	{r3}
 80031c4:	469e      	mov	lr, r3
 80031c6:	4770      	bx	lr
